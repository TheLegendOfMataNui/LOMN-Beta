class l4_maz1_puzzle {
    property parent;
    property boulder;
    property icicles;
    property incme;
    property savecam;
    property falltimer;
    property camstate;
    property planeoff;
    property shake;
    property temporient;
    property firstdrop;
    property seconddrop;
    
    method l4_maz1_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        gcareadirector::setnearestmax(50);
        var1 = 0;
        var2 = 0;
        this.incme = 0;
        this.shake = 1;
        this.temporient = 0;
        this.icicles = [  ];
        this.planeoff = 1;
        this.firstdrop = 1;
        this.seconddrop = 1;
        this.camstate = 0;
        this.falltimer = new lego_timer("fltm", 4.5, 0);
        this.falltimer.initfull();
        this.savecam = [  ];
        this.incme = 0;
        this.boulder = new lego_physicsobject("sn00", this.parent.name);
        this.boulder.initfull(1.0, 0, 0, 0, 0, 2.8, "test", "Root/data/levels/lev4/maz1", 60);
        this.boulder.setposition(336.1, 109.6, 0 - 534.4);
        this.boulder.setbouncefactor(0.15);
        this.boulder.setbounceeventrepoert(1);
        this.boulder.setignoreallcollisions(0);
        var3 = 0;
        while ((this.icicles.__length - 1) >= var3) {
            this.icicles[var3].initfull();
            this.icicles[var3].setbouncefactor(0.01);
            this.icicles[var3].setbounceeventrepoert(1);
            var3 = var3 + 1;
        }
        var4 = gcareadirector::gethive(scslosifoundation::stringtoidentifier("ghv0"));
        gchive::setmaxcreatures(var4, 2);
        gchive::setcreaturetype(var4, scslosifoundation::stringtoidentifier("lsrp"));
        gchive::setspawnrate(var4, 4);
        var5 = gcareadirector::gethive(scslosifoundation::stringtoidentifier("fhv0"));
        gchive::setmaxcreatures(var5, 2);
        gchive::setcreaturetype(var5, scslosifoundation::stringtoidentifier("ibat"));
        gchive::setspawnrate(var5, 4);
        var6 = gcareadirector::gethive(scslosifoundation::stringtoidentifier("fhv1"));
        gchive::setmaxcreatures(var6, 2);
        gchive::setcreaturetype(var6, scslosifoundation::stringtoidentifier("ibat"));
        gchive::setspawnrate(var6, 4);
        return null;
    }
    
    method cleanupfull() {
        var var1;
        var var2;
        var var3;
        var var4;
        var1 = null;
        var2 = null;
        var3 = null;
        var4 = 0;
        while ((this.icicles.__length - 1) >= var4) {
            this.icicles.cleanupfull();
            this.icicles[var4] = null;
            var4 = var4 + 1;
        }
        this.icicles = null;
        this.falltimer.cleanupfull();
        this.falltimer = null;
        var4 = 0;
        while ((this.savecam.__length - 1) >= var4) {
            this.savecam[var4] = null;
            var4 = var4 + 1;
        }
        this.savecam = null;
        this.boulder.cleanupfull();
        this.boulder = null;
        return null;
    }
    
    method show() {
        this.boulder.show();
        return null;
    }
    
    method hide() {
        return null;
    }
    
    method onevent(param1) {
        var var1;
        if (param1.eventid == 1) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("cnt1")) {
                if (param1.args[1] == this.boulder.id) {
                    globalclass.player.kill();
                }
            }
        }
        else if (param1.eventid == 4) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("drop")) {
                if (param1.args[1] == 0) {
                    if (this.planeoff) {
                        debug::print("*** HIT THE TRIGGER PLANE");
                        this.dropboulder(1);
                        this.planeoff = 0;
                    }
                }
            }
        }
        else if (param1.eventid == 27) {
            globalclass.player.unkill();
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.actor.switchanimation(scslosifoundation::stringtoidentifier("k000"));
            globalclass.player.actor.setinputstate("ninp");
            this.parent.level.cam.setaimode(11);
            gccollisionphysicsgroup::toggletriggerboxentered(scslosifoundation::stringtoidentifier("tb00"), 0);
            gccollisionphysicsgroup::toggletriggerboxentered(scslosifoundation::stringtoidentifier("tb01"), 0);
            this.planeoff = 1;
            this.boulder.setposition(336.1, 109.6, 0 - 534.4);
            this.boulder.setmoveableflags(0, 0, 0, 0);
        }
        else if (param1.eventid == 17) {
            if (param1.args[0] == this.boulder.id) {
                if (scslosimath::abs(param1.args[1]) >= 40) {
                    this.parent.level.cam.shakecamera(0.13, 0.4);
                    this.boulder.chasetoa(20.0);
                }
            }
            if (param1.args[1] >= 10) {
                var1 = 0;
                while ((this.icicles.__length - 1) >= var1) {
                    if (param1.args[0] == this.icicles[var1].id) {
                        this.icicles[var1].fadeout(2.5);
                    }
                    var1 = var1 + 1;
                }
            }
        }
        else if (param1.eventid == 14) {
            if (this.camstate == 1) {
                this.boulder.setmoveableflags(1, 1, 0, 1);
            }
            if (this.camstate == 2) {
                this.parent.level.cam.setaimode(11);
            }
        }
        else if (param1.eventid == 8) {
            if (param1.args[0] == this.falltimer.id) {
                this.camstate = 2;
                this.parent.level.cam.interpolate(365.0, 0 - 13.7, 0 - 587.4, 333.0, 1.4, 0 - 501.5, 2.0);
            }
        }
        else if (param1.eventid == 7) {
            if (param1.args[2] == scslosifoundation::stringtoidentifier("Ecut")) {
                gcstaticsoundsptrarray::playtablesound(149);
            }
        }
        return null;
    }
    
    method input(param1) {
        if (param1.button == 49) {
            if (param1.event == 2) {
                this.nextice();
            }
        }
        if (param1.button == 50) {
            if (param1.event == 2) {
                this.iceshake(this.incme);
            }
        }
        return null;
    }
    
    method process(param1) {
        if (this.shake) {
            
        }
        return null;
    }
    
    method nextice() {
        return null;
    }
    
    method dropboulder(param1) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        if (param1 == 1) {
            var1 = this.parent.level.cam.getpositionx();
            var2 = this.parent.level.cam.getpositiony();
            var3 = this.parent.level.cam.getpositionz();
            var4 = this.parent.level.cam.getforwardx();
            var5 = this.parent.level.cam.getforwardy();
            var6 = this.parent.level.cam.getforwardz();
            this.savecam = [ var1, 
                var2, 
                var3, 
                var4, 
                var5, 
                var6 ];
            this.parent.level.cam.setaimode(0);
            this.camstate = 1;
            this.parent.level.cam.interpolate(350.5, 0 - 1.9, 0 - 523.5, 336.1, 109.6, 0 - 534.4, 2.0);
            this.falltimer.reset(0);
            this.falltimer.start();
        }
        return null;
    }
    
    method iceshake(param1) {
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
}