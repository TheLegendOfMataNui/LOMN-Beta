class bugpitpuzzle_class {
    property parent;
    property trapdoortimer;
    property deadthings;
    property door_trap;
    property door_goal_a;
    property door_goal_b;
    property trapdoorshut;
    property door_trap_original;
    property door_goal_a_original;
    property door_goal_b_original;
    property hive1handle;
    property hive2handle;
    property hive3handle;
    property hive4handle;
    
    method bugpitpuzzle_class(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        gcareadirector::setfog(-15066598, 0 - 1.0, 0 - 400.0, 0.05);
        gclightdirector::setcavelighting(1);
        gcareadirector::setnearestmax(5);
        gcmodeldirector::setnearestmax(15);
        globalclass.bgmusic.changefilename("Root/Data/sounds/MUSICLEGOUNDERGROUND");
        globalclass.bgmusic.play(1);
        this.trapdoortimer = new lego_timer("trap", 2.0, 0);
        this.hive1handle = gcareadirector::gethive(scslosifoundation::stringtoidentifier("ghv1"));
        gchive::setmaxcreatures(this.hive1handle, 0);
        gchive::setcreaturetype(this.hive1handle, scslosifoundation::stringtoidentifier("bugz"));
        gchive::setspawnrate(this.hive1handle, 30);
        this.hive2handle = gcareadirector::gethive(scslosifoundation::stringtoidentifier("ghv2"));
        gchive::setmaxcreatures(this.hive2handle, 0);
        gchive::setcreaturetype(this.hive2handle, scslosifoundation::stringtoidentifier("bugz"));
        gchive::setspawnrate(this.hive2handle, 30);
        this.hive3handle = gcareadirector::gethive(scslosifoundation::stringtoidentifier("ghv3"));
        gchive::setmaxcreatures(this.hive3handle, 0);
        gchive::setcreaturetype(this.hive3handle, scslosifoundation::stringtoidentifier("bugz"));
        gchive::setspawnrate(this.hive3handle, 30);
        this.hive4handle = gcareadirector::gethive(scslosifoundation::stringtoidentifier("ghv4"));
        gchive::setmaxcreatures(this.hive4handle, 0);
        gchive::setcreaturetype(this.hive4handle, scslosifoundation::stringtoidentifier("bugz"));
        gchive::setspawnrate(this.hive4handle, 30);
        this.deadthings = 0;
        this.door_trap = new lego_moveableobject("dor3", this.parent.name);
        this.door_goal_a = new lego_moveableobject("dor7", this.parent.name);
        this.door_goal_b = new lego_moveableobject("dor8", this.parent.name);
        this.trapdoorshut = 0;
        this.trapdoortimer.initfull();
        this.door_trap.initfull();
        this.door_goal_a.initfull();
        this.door_goal_b.initfull();
        this.door_trap_original = new basicpoint(this.door_trap.getx(), this.door_trap.gety(), this.door_trap.getz());
        this.door_goal_a_original = new basicpoint(this.door_goal_a.getx(), this.door_goal_a.gety(), this.door_goal_a.getz());
        this.door_goal_b_original = new basicpoint(this.door_goal_b.getx(), this.door_goal_b.gety(), this.door_goal_b.getz());
        this.door_goal_a.ignorecollisionswith(this.door_goal_b.id);
        this.door_goal_b.ignorecollisionswith(this.door_goal_a.id);
        this.door_trap.setresponse(3, 3, 3);
        this.door_goal_a.setresponse(3, 3, 3);
        this.door_goal_b.setresponse(3, 3, 3);
        gcstaticsoundsptrarray::playtablesound(1042);
        bettersaver::setbooleanvalue(72, 1);
        return null;
    }
    
    method initshort() {
        this.initfull();
        return null;
    }
    
    method cleanupfull() {
        if (this.door_trap != null) {
            this.door_trap.cleanupfull();
            this.door_trap = null;
        }
        if (this.door_goal_a != null) {
            this.door_goal_a.cleanupfull();
            this.door_goal_a = null;
        }
        if (this.door_goal_b != null) {
            this.door_goal_b.cleanupfull();
            this.door_goal_b = null;
        }
        if (this.trapdoortimer != null) {
            this.trapdoortimer.cleanupfull();
            this.trapdoortimer = null;
        }
        this.hive1handle = null;
        this.hive2handle = null;
        this.hive3handle = null;
        this.hive4handle = null;
        this.deadthings = null;
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
    
    method cleanupshort() {
        this.door_trap.setpos(this.door_trap_original);
        this.door_goal_a.setpos(this.door_goal_a_original);
        this.door_goal_b.setpos(this.door_goal_b_original);
        this.trapdoortimer.reset();
        this.trapdoortimer.stop();
        this.trapdoorshut = 0;
        return null;
    }
    
    method process(param1) {
        return null;
    }
    
    method onevent(param1) {
        var var1;
        var var2;
        if (param1.eventid == 4) {
            var1 = param1.args[0];
            if (var1 == scslosifoundation::stringtoidentifier("tp00")) {
                if (this.trapdoorshut == 0) {
                    this.trapdooraction();
                }
            }
        }
        else if (param1.eventid == 8) {
            var2 = param1.args[0];
            if (var2 == scslosifoundation::stringtoidentifier("trap")) {
                this.parent.level.cam.setaimode(11);
                globalclass.player.actor.setinputstate("ninp");
                globalclass.player.actor.idle();
                scprocessmanager::pausecreatures(0);
                gchive::setmaxcreatures(this.hive1handle, 3);
                gchive::setspawnrate(this.hive1handle, 3);
                gchive::setmaxcreatures(this.hive2handle, 3);
                gchive::setspawnrate(this.hive2handle, 3);
                gchive::setmaxcreatures(this.hive3handle, 3);
                gchive::setspawnrate(this.hive3handle, 3);
                gchive::setmaxcreatures(this.hive4handle, 3);
                gchive::setspawnrate(this.hive4handle, 3);
            }
        }
        else if (param1.eventid == 46) {
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 27) {
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            this.cleanupshort();
            globalclass.player.unkill();
            globalclass.player.actor.switchanimation(scslosifoundation::stringtoidentifier("o000"));
            globalclass.player.actor.setinputstate("ninp");
        }
        else if (param1.eventid == 51) {
            this.deadthings = this.deadthings + 1;
            this.killedahive();
        }
        else if (param1.eventid == 101) {
            this.deadthings = this.deadthings + 1;
            this.killedahive();
        }
        return null;
    }
    
    method input(param1) {
        return null;
    }
    
    method trapdooraction() {
        scprocessmanager::pausecreatures(1);
        globalclass.bgmusic.changefilename("Root/Data/sounds/MUSICONUATHEME");
        globalclass.bgmusic.play(1);
        this.trapdoortimer.start();
        gcstaticsoundsptrarray::playtablesound(1105);
        this.door_trap.changeposition(0.0, 0 - 15.0, 0.0, 0.5);
        this.trapdoorshut = 1;
        this.parent.level.cam.setaimode(0);
        this.parent.level.cam.settargetpos(888.3, 9.4, 126.5);
        this.parent.level.cam.setpos(886.6, 7.0, 117.8);
        this.parent.level.cam.shakecamera(1.5, 0.15);
        globalclass.player.actor.setinputstate("none");
        globalclass.player.actor.switchanimation(scslosifoundation::stringtoidentifier("o000"));
        return null;
    }
    
    method killedahive() {
        var var1;
        if (this.deadthings == 8) {
            var1 = 5.5;
            globalclass.bgmusic.changefilename("Root/Data/sounds/MUSICLEGOUNDERGROUND");
            globalclass.bgmusic.play(1);
        }
        else {
            var1 = this.deadthings * 0.25;
        }
        this.door_goal_a.changeposition(0 - var1, 0.0, var1, 0.0);
        this.door_goal_b.changeposition(var1, 0.0, 0 - var1, 0.0);
        return null;
    }
}