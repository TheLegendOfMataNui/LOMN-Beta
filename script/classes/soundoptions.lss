class soundoptions {
    property parent;
    property curoption;
    property mousex;
    property mousey;
    property optarray;
    property musicvolumeoption;
    property musicvolumevalue;
    property soundvolumeoption;
    property soundvolumevalue;
    property playmusicoption;
    property playmusicvalue;
    property playsoundoption;
    property playsoundvalue;
    property backoption;
    property active;
    
    method soundoptions(param1) {
        this.parent = param1;
        this.active = 0;
        return null;
    }
    
    method initfull() {
        var var1;
        var1 = 0;
        this.curoption = -1;
        this.optarray = [  ];
        this.musicvolumevalue = gcsaver::getmusicvolume();
        this.musicvolumeoption = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 31), __tostring(this.musicvolumevalue) + "%", this.optarray.__length, 2, this.musicvolumevalue);
        this.musicvolumeoption.initfull();
        this.optarray.__append(this.musicvolumeoption);
        this.soundvolumevalue = gcsaver::getsoundvolume();
        this.soundvolumeoption = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 49), __tostring(this.soundvolumevalue) + "%", this.optarray.__length, 2, this.soundvolumevalue);
        this.soundvolumeoption.initfull();
        this.optarray.__append(this.soundvolumeoption);
        this.backoption = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 3), "", this.optarray.__length);
        this.backoption.initfull();
        this.optarray.__append(this.backoption);
        this.active = 1;
        return null;
    }
    
    method cleanupfull() {
        if (!(this.optarray == null)) {
            this.cleanupshort();
        }
        this.parent = null;
        return null;
    }
    
    method cleanupshort() {
        var var1;
        var var2;
        if (!(this.optarray == null)) {
            var1 = this.optarray.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.optarray[var1 - var2].cleanupfull();
                this.optarray[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.optarray = null;
        }
        this.musicvolumeoption = null;
        this.soundvolumeoption = null;
        this.playmusicoption = null;
        this.playsoundoption = null;
        this.backoption = null;
        return null;
    }
    
    method input(param1) {
        if (this.active) {
            if (this.curoption == 0) {
                
            }
            else if (this.curoption == 1) {
                
            }
            if (param1.event == 2) {
                if ((param1.button == 27) || (param1.button == 8)) {
                    this.back();
                }
            }
        }
        return null;
    }
    
    method onevent(param1) {
        if (this.active) {
            this.musicvolumeoption.onevent(param1);
            this.soundvolumeoption.onevent(param1);
            if (param1.eventid == 25) {
                this.mousebuttonreleased(param1.args[0]);
            }
            else if (param1.eventid == 26) {
                this.mousex = param1.args[0];
                this.mousey = param1.args[1];
                this.checkmousepos();
            }
        }
        return null;
    }
    
    method checkmousepos() {
        var var1;
        var var2;
        var1 = -1;
        var2 = 0;
        while ((this.optarray.__length - 1) >= var2) {
            if (this.optarray[var2].check(this.mousex, this.mousey) == 1) {
                var1 = var2;
            }
            var2 = var2 + 1;
        }
        this.curoption = var1;
        return null;
    }
    
    method mousebuttonreleased(param1) {
        var var1;
        this.musicvolumevalue = this.musicvolumeoption.getslidervalue();
        gcsaver::setmusicvolume(this.musicvolumevalue);
        var1 = this.soundvolumevalue;
        this.soundvolumevalue = this.soundvolumeoption.getslidervalue();
        gcsaver::setsoundvolume(this.soundvolumevalue);
        if (this.curoption == -1) {
            
        }
        else if (this.curoption == 2) {
            this.back();
        }
        else if (!(var1 == this.soundvolumevalue)) {
            gcstaticsoundsptrarray::playtablesound(1072);
        }
        this.curoption;
        return null;
    }
    
    method back() {
        this.active = 0;
        this.cleanupshort();
        this.parent.back();
        gcstaticsoundsptrarray::playtablesound(1073);
        return null;
    }
}