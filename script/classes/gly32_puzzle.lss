class gly32_puzzle {
    property parent;
    property switch1_up;
    property switch2_up;
    property switch3_up;
    property switch4_up;
    property switch5_up;
    property switch1;
    property switch2;
    property switch3;
    property switch4;
    property switch5;
    property numberofdownswitchs;
    property glyph;
    property doorarray;
    property curentorient;
    property rotating;
    property rotatetime;
    property rotatespeed;
    property desctext;
    property howtotext;
    property distplaytexttimer;
    property deltatimer1;
    property rotation;
    
    method gly32_puzzle(param1) {
        this.parent = param1;
        this.switch1_up = 1;
        this.switch2_up = 1;
        this.switch3_up = 1;
        this.switch4_up = 1;
        this.switch5_up = 1;
        return null;
    }
    
    method initfull() {
        var KEVIN;
        var glyph_text;
        var var1;
        this.rotation = 0;
        this.deltatimer1 = 0.0;
        gcmodeldirector::setnearestmax(7);
        gcareadirector::setnearestmax(7);
        gclightdirector::setcavelighting(1);
        globalclass.bgmusic.changefilename("Root/Data/sounds/Musiclowandcreepyambience");
        globalclass.bgmusic.play();
        globalclass.player.actor.setwaterlevel(1000);
        if (gcsaver::findglyph(scslosifoundation::stringtoidentifier("glyp")) == 0) {
            this.glyph = new lego_moveableobject("glyp");
            this.glyph.initfull();
            this.glyph.show();
            this.distplaytexttimer = new lego_timer("dspt", 4.0, 0);
            this.distplaytexttimer.initfull();
            glyph_text = gcareadirector::getscriptstring(scslosifoundation::stringtoidentifier("item"), 4, 0);
            this.desctext = new gs_legotext("Root/Data/Art/Fonts/BionicleFontHi", glyph_text, screenx * 0.5, screeny - 130, 0, 1, 256, 0, 0);
            this.desctext.initfull();
            glyph_text = gcareadirector::getscriptstring(scslosifoundation::stringtoidentifier("item"), 4, 1);
            this.howtotext = new gs_legotext("Root/Data/Art/Fonts/BionicleFont", glyph_text, screenx * 0.5, (screeny - 100) + 20, 0, 1, 256, 0, 0);
            this.howtotext.initfull();
        }
        this.numberofdownswitchs = 0;
        this.switch1 = new lego_moveableobject("swc1");
        this.switch1.initfull();
        this.switch1.settweakable();
        this.switch1.setresponse(0, 0, 0);
        this.switch2 = new lego_moveableobject("swc2");
        this.switch2.initfull();
        this.switch2.settweakable();
        this.switch2.setresponse(0, 0, 0);
        this.switch3 = new lego_moveableobject("swc3");
        this.switch3.initfull();
        this.switch3.settweakable();
        this.switch3.setresponse(0, 0, 0);
        this.switch4 = new lego_moveableobject("swc4");
        this.switch4.initfull();
        this.switch4.settweakable();
        this.switch4.setresponse(0, 0, 0);
        this.switch5 = new lego_moveableobject("swc5");
        this.switch5.initfull();
        this.switch5.settweakable();
        this.switch5.setresponse(0, 0, 0);
        this.doorarray = [ new lego_moveableobject("g4d1"), 
            new lego_moveableobject("g4d2"), 
            new lego_moveableobject("g4d3"), 
            new lego_moveableobject("g4d4") ];
        var1 = 0;
        while ((this.doorarray.__length - 1) >= var1) {
            this.doorarray[var1].initfull();
            var1 = var1 + 1;
        }
        this.curentorient = 0;
        this.rotating = 0;
        this.rotatetime = 0;
        this.rotatespeed = 7;
        KEVIN = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("kevn"));
        gccharacter::setscale(KEVIN, 15.0);
        this.settostartingpositions();
        return null;
    }
    
    method cleanupfull() {
        var var1;
        if (this.doorarray != null) {
            var1 = 0;
            while ((this.doorarray.__length - 1) >= var1) {
                this.doorarray[var1].cleanupfull();
                this.doorarray[var1] = null;
                var1 = var1 + 1;
            }
            this.doorarray = null;
        }
        if (this.desctext != null) {
            this.desctext.cleanupfull();
            this.desctext = null;
        }
        if (this.howtotext != null) {
            this.howtotext.cleanupfull();
            this.howtotext = null;
        }
        if (this.distplaytexttimer != null) {
            this.distplaytexttimer.cleanupfull();
            this.distplaytexttimer = null;
        }
        if (this.switch1 != null) {
            this.switch1.cleanupfull();
            this.switch1 = null;
        }
        if (this.switch2 != null) {
            this.switch2.cleanupfull();
            this.switch2 = null;
        }
        if (this.switch3 != null) {
            this.switch3.cleanupfull();
            this.switch3 = null;
        }
        if (this.switch4 != null) {
            this.switch4.cleanupfull();
            this.switch4 = null;
        }
        if (this.switch5 != null) {
            this.switch5.cleanupfull();
            this.switch5 = null;
        }
        if (this.glyph != null) {
            this.glyph.cleanupfull();
            this.glyph = null;
        }
        return null;
    }
    
    method showtext() {
        this.desctext.add();
        this.desctext.show();
        this.howtotext.add();
        this.howtotext.show();
        this.distplaytexttimer.reset(0);
        this.distplaytexttimer.start();
        this.glyph.hide();
        globalclass.player.addelement(7);
        globalclass.hud.show();
        gcsaver::pickupglyph(this.glyph.id);
        return null;
    }
    
    method removetext() {
        if (!(this.desctext == null)) {
            this.desctext.hide();
            this.desctext.cleanupfull();
            this.desctext = null;
        }
        if (!(this.howtotext == null)) {
            this.howtotext.hide();
            this.howtotext.cleanupfull();
            this.howtotext = null;
        }
        return null;
    }
    
    method process(param1) {
        if (this.rotating) {
            this.rotatetime = this.rotatetime + param1.deltatime;
            if (this.rotatespeed > 0) {
                if (this.rotatetime > (1 / this.rotatespeed)) {
                    this.rotatetime = 0;
                    this.opendoors();
                }
            }
        }
        this.deltatimer1 = this.deltatimer1 + param1.deltatime;
        if (this.deltatimer1 > 0) {
            
        }
        if (this.rotation >= 360) {
            this.rotation = 0;
        }
        else {
            this.rotation = this.rotation + 2;
        }
        if (this.glyph != null) {
            this.glyph.setorientation(this.rotation, this.rotation, 0);
        }
        if ((globalclass.player.whichmaskonface() == 8) && (globalclass.player.ismaskpoweron() == 1)) {
            gcareadirector::setfog(-16777216, 0 - 1.0, 0 - 350.0, 0.05);
            debug::print("FOG DISPELLED");
        }
        else {
            gcareadirector::setfog(-16777216, 0 - 1.0, 0 - 150.0, 0.05);
            debug::print("SPOOKY TIME");
        }
        return null;
    }
    
    method onevent(param1) {
        if (param1.eventid == 8) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("dspt")) {
                this.removetext();
            }
        }
        else if (param1.eventid == 46) {
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 27) {
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.unkill();
            globalclass.player.actor.setunderwater(1);
        }
        else if (param1.eventid == 3) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tb00")) {
                this.removetext();
                gcbagroup::setswitchareas(scslosifoundation::stringtoidentifier("takv"), scslosifoundation::stringtoidentifier("str0"), scslosifoundation::stringtoidentifier("lok0"));
            }
        }
        else if (param1.eventid == 1) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("swc1")) {
                if (this.switch1_up) {
                    gcstaticsoundsptrarray::playtablesound(1085);
                    this.switch1.setlocalpos(0, -1, 0);
                    this.numberofdownswitchs = this.numberofdownswitchs + 1;
                    this.switch1_up = 0;
                    this.test();
                }
            }
            else if (param1.args[0] == scslosifoundation::stringtoidentifier("swc2")) {
                if (this.switch2_up) {
                    gcstaticsoundsptrarray::playtablesound(1085);
                    this.switch2.setlocalpos(0, -1, 0);
                    this.numberofdownswitchs = this.numberofdownswitchs + 1;
                    this.switch2_up = 0;
                    this.test();
                }
            }
            else if (param1.args[0] == scslosifoundation::stringtoidentifier("swc3")) {
                if (this.switch3_up) {
                    gcstaticsoundsptrarray::playtablesound(1085);
                    this.switch3.setlocalpos(0, -1, 0);
                    this.numberofdownswitchs = this.numberofdownswitchs + 1;
                    this.switch3_up = 0;
                    this.test();
                }
            }
            else if (param1.args[0] == scslosifoundation::stringtoidentifier("swc4")) {
                if (this.switch4_up) {
                    gcstaticsoundsptrarray::playtablesound(1085);
                    this.switch4.setlocalpos(0, -1, 0);
                    this.numberofdownswitchs = this.numberofdownswitchs + 1;
                    this.switch4_up = 0;
                    this.test();
                }
            }
            else if (param1.args[0] == scslosifoundation::stringtoidentifier("swc5")) {
                if (this.switch5_up) {
                    gcstaticsoundsptrarray::playtablesound(1085);
                    this.switch5.setlocalpos(0, -1, 0);
                    this.numberofdownswitchs = this.numberofdownswitchs + 1;
                    this.switch5_up = 0;
                    this.test();
                }
            }
            else if (param1.args[0] == scslosifoundation::stringtoidentifier("cnt1")) {
                if (param1.args[1] == scslosifoundation::stringtoidentifier("glyp")) {
                    this.showtext();
                }
            }
        }
        return null;
    }
    
    method input(param1) {
        return null;
    }
    
    method settostartingpositions() {
        if (this.switch1_up == 0) {
            this.switch1.setlocalpos(0, -1, 0);
            this.numberofdownswitchs = this.numberofdownswitchs + 1;
        }
        if (this.switch2_up == 0) {
            this.switch2.setlocalpos(0, -1, 0);
            this.numberofdownswitchs = this.numberofdownswitchs + 1;
        }
        if (this.switch3_up == 0) {
            this.switch3.setlocalpos(0, -1, 0);
            this.numberofdownswitchs = this.numberofdownswitchs + 1;
        }
        if (this.switch4_up == 0) {
            this.switch4.setlocalpos(0, -1, 0);
            this.numberofdownswitchs = this.numberofdownswitchs + 1;
        }
        if (this.switch5_up == 0) {
            this.switch5.setlocalpos(0, -1, 0);
            this.numberofdownswitchs = this.numberofdownswitchs + 1;
        }
        this.test();
        return null;
    }
    
    method test() {
        var var1;
        var var2;
        var var3;
        if (this.numberofdownswitchs >= 5) {
            this.rotating = 1;
            globalclass.level.cam.setaimode(0);
            globalclass.level.cam.setpos(0 - 349.1, 0 - 252.7, 0 - 175.4);
            var1 = this.doorarray[0].getx();
            var2 = this.doorarray[0].gety();
            var3 = this.doorarray[0].getz();
            globalclass.level.cam.settargetpos(var1, var2, var3);
        }
        return null;
    }
    
    method opendoors() {
        this.curentorient = this.curentorient + 1;
        if (this.curentorient > 100) {
            globalclass.level.cam.setaimode(11);
            this.rotating = 0;
        }
        else {
            this.doorarray[0].setorientation(0, this.curentorient, 0);
            this.doorarray[1].setorientation(0, 0 - this.curentorient, 0);
            this.doorarray[2].setorientation(0, this.curentorient, 0);
            this.doorarray[3].setorientation(0, 0 - this.curentorient, 0);
        }
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
}