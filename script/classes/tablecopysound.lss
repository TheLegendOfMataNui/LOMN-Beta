class tablecopysound {
    property handle;
    property index;
    
    method tablecopysound(soundtable_id) {
        this.index = soundtable_id;
        this.handle = gcstaticsoundsptrarray::gettablesoundcopy(soundtable_id);
        if (this.handle == null) {
            debug::print(("ERROR --- can not create << " + __tostring(soundtable_id)) + " >> sound returned nothing");
        }
        return null;
    }
    
    method synctocharacter(char_id) {
        if (this.handle != null) {
            gc3dsound::synctocharacter(this.handle, char_id);
        }
        return null;
    }
    
    method synctoobject(obj_id) {
        if (this.handle != null) {
            gc3dsound::synctoobject(this.handle, obj_id);
        }
        return null;
    }
    
    method synctoprojectile(projectile_id) {
        if (this.handle != null) {
            gc3dsound::synctoprojectile(this.handle, projectile_id);
        }
        return null;
    }
    
    method play(bool) {
        if (this.handle != null) {
            if (bool == null) {
                bool = 0;
            }
            if (this.handle == null) {
                debug::print(("ERROR --- CAN'T Play sound << " + __tostring(this.index)) + " >> handle is nothing");
            }
            else {
                gc3dsound::play(this.handle, bool);
            }
        }
        return null;
    }
    
    method stop(unused) {
        if (this.handle != null) {
            gc3dsound::stop(this.handle);
        }
        return null;
    }
    
    method stopreset(unused) {
        if (this.handle != null) {
            gc3dsound::stopreset(this.handle);
        }
        return null;
    }
    
    method cleanupfull() {
        if (this.handle != null) {
            this.stop();
            gcstaticsoundsptrarray::checkintablesoundcopy(this.handle);
            this.handle = null;
        }
        return null;
    }
    
    method setplayoffset(param1) {
        if (this.handle != null) {
            gc3dsound::setplayoffset(this.handle, param1);
        }
        return null;
    }
    
    method setvolume(param1) {
        if (this.handle != null) {
            gc3dsound::setvolume(this.handle, param1);
        }
        return null;
    }
    
    method setpan(param1) {
        if (this.handle != null) {
            gc3dsound::setpan(this.handle, param1);
        }
        return null;
    }
    
    method setfrequency(param1) {
        if (this.handle != null) {
            gc3dsound::setfrequency(this.handle, param1);
        }
        return null;
    }
    
    method getfrequency() {
        if (this.handle != null) {
            return gc3dsound::getfrequency(this.handle);
        }
        return null;
    }
    
    method setposition(param1, param2, param3) {
        if (this.handle != null) {
            gc3dsound::setposition(this.handle, param1, param2, param3);
        }
        return null;
    }
    
    method setmindistance(param1) {
        if (this.handle != null) {
            gc3dsound::setmindistance(this.handle, param1);
        }
        return null;
    }
    
    method setmaxdistance(param1) {
        if (this.handle != null) {
            gc3dsound::setmaxdistance(this.handle, param1);
        }
        return null;
    }
    
    method setconeorientation(param1, param2, param3) {
        if (this.handle != null) {
            gc3dsound::setconeorientation(this.handle, param1, param2, param3);
        }
        return null;
    }
    
    method setconeangles(param1, param2) {
        if (this.handle != null) {
            gc3dsound::setconeangles(this.handle, param1, param2);
        }
        return null;
    }
    
    method setconeoutsidevolume(param1) {
        if (this.handle != null) {
            gc3dsound::setconeoutsidevolume(this.handle, param1);
        }
        return null;
    }
    
    method setlistenerrollofffactor(param1) {
        if (this.handle != null) {
            gc3dsound::setlistenerrollofffactor(param1);
        }
        return null;
    }
    
    method drifttovolume(param1, param2) {
        if (this.handle != null) {
            gc3dsound::drifttovolume(this.handle, param1, param2);
        }
        return null;
    }
}