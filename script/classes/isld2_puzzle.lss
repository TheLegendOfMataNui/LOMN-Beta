class isld2_puzzle {
    property parent;
    property entered_underwater;
    property call_ev_safe_time_once;
    property gearpickup;
    property displaytexttimer;
    property desctext;
    property howtotext;
    property wirlpool;
    property orientation;
    property whirlcone;
    property divetrigger;
    property toa;
    
    method isld2_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var gearpickup_text;
        gcareadirector::setfog(-9143565, 0 - 1000.0, 0 - 2400.0, 0.01);
        gclightdirector::setcavelighting(0);
        gcareadirector::setnearestmax(50);
        globalclass.bgmusic.changefilename("Root/Data/sounds/MusicGaliAmbience");
        globalclass.bgmusic.play();
        this.call_ev_safe_time_once = 1;
        this.entered_underwater = 1;
        this.wirlpool = new lego_moveableobject("wpbm");
        this.wirlpool.initfull();
        this.wirlpool.settweakable();
        this.orientation = 0;
        this.whirlcone = new lego_moveableobject("wpcl");
        this.whirlcone.initfull();
        this.whirlcone.hide();
        this.divetrigger = 0;
        this.toa = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("cnt1"), 0);
        gccharacter::setvelocity(this.toa, 0.0, 150.0, 0.0);
        globalclass.player.actor.setsplitanimation(scslosifoundation::stringtoidentifier("g055"));
        gccharactermoveinterpreter::checkanimdone(scslosifoundation::stringtoidentifier("g048"));
        if (gcsaver::finditem(scslosifoundation::stringtoidentifier("gear")) == 0) {
            this.gearpickup = new lego_pickup("gear", 0, 5, "item", 6, 1);
            this.gearpickup.initfull();
            this.gearpickup.show();
            this.gearpickup.setcondition(65536);
            this.gearpickup.setquest(2);
        }
        else {
            this.gearpickup = new lego_moveableobject("gear");
            this.gearpickup.initfull();
            this.gearpickup.hide();
        }
        return null;
    }

    method process(param1) {
        this.rotatewirlpool();
        return null;
    }
    
    method onevent(param1) {
        if (param1.eventid == 4) {
            if ((param1.args[0] == scslosifoundation::stringtoidentifier("dive")) && (this.divetrigger == 0)) {
                globalclass.player.actor.setsplitanimation(scslosifoundation::stringtoidentifier("g044"));
                gccharacter::setforwardvelocity(this.toa, 15.0);
                this.divetrigger = 1;
                this.whirlcone.show();
            }
        }
        else if (param1.eventid == 27) {
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.unkill();
            globalclass.player.actor.setinputstate("ninp");
            globalclass.player.actor.switchanimation(scslosifoundation::stringtoidentifier("g000"));
            this.parent.level.cam.setaimode(11);
            if (this.entered_underwater == 0) {
                globalclass.player.actor.setunderwater(0);
                debug::print("******************************** OUT OF WATER");
            }
            else {
                debug::print("******************************** IN WATER");
                globalclass.player.actor.setwaterlevel(1000);
            }
        }
        else if (param1.eventid == 44) {
            if (this.call_ev_safe_time_once) {
                if (this.parent.enterstartid == scslosifoundation::stringtoidentifier("str0")) {
                    this.entered_underwater = 0;
                    debug::print("*******************************1 OUT OF WATER");
                    globalclass.player.actor.setunderwater(0);
                }
                else {
                    this.entered_underwater = 1;
                    debug::print("*******************************1 IN WATER");
                    globalclass.player.actor.setwaterlevel(1000);
                }
                this.call_ev_safe_time_once = 0;
            }
        }
        return null;
    }
    
    method cleanupfull() {
        if (this.wirlpool != null) {
            this.wirlpool.cleanupfull();
            this.wirlpool = null;
        }
        if (this.gearpickup != null) {
            this.gearpickup.cleanupfull();
            this.gearpickup = null;
        }
        return null;
    }

    method rotatewirlpool() {
        if (this.orientation > 359) {
            this.orientation = 0;
        }
        else {
            this.orientation = this.orientation - 1;
        }
        this.wirlpool.setorientation(0.0, this.orientation, 0.0);
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
}