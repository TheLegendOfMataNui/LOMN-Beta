class shrn1_puzzle {
    property parent;
    property crackparts;
    property crackdefaults;
    property cracktimer;
    property crackplane;
    property edoor;
    property edoortext;
    property edoortexttimer;
    property mdoors;
    property crackstate;
    property showedoor;
    property portalactive;
    
    method shrn1_puzzle(param1) {
        this.parent = param1;
        this.crackstate = 0;
        this.showedoor = 1;
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        var portal_trigger;
        gcareadirector::setfog(-16777216, 0 - 65.0, 0 - 600.0, 0.05);
        gclightdirector::setcavelighting(1);
        gcareadirector::setnearestmax(15);
        gcmodeldirector::setnearestmax(3);
        globalclass.bgmusic.changefilename("Root/Data/sounds/MusicShrine");
        globalclass.bgmusic.play(1);
        this.mdoors = [ new l1shrn_door("sdr3"), 
            new l1shrn_door("sdr4") ];
        var1 = 0;
        while ((this.mdoors.__length - 1) >= var1) {
            this.mdoors[var1].initfull();
            this.mdoors[var1].show();
            var1 = var1 + 1;
        }
        if (bettersaver::getbooleanvalue(72)) {
            this.mdoors[1].openclose(1.0, 3.0);
        }
        if (bettersaver::getbooleanvalue(73)) {
            this.crackstate = 5;
            this.crackparts = [ new lego_moveableobject("dp00", this.parent.name), 
                new lego_moveableobject("dp01", this.parent.name), 
                new lego_moveableobject("dp02", this.parent.name), 
                new lego_moveableobject("dp03", this.parent.name), 
                new lego_moveableobject("dp04", this.parent.name), 
                new lego_moveableobject("dp05", this.parent.name), 
                new lego_moveableobject("dp06", this.parent.name), 
                new lego_moveableobject("dp07", this.parent.name) ];
            var1 = 0;
            while ((this.crackparts.__length - 1) >= var1) {
                this.crackparts[var1].initfull();
                this.crackparts[var1].setresponse(4, 4, 4);
                this.crackparts[var1].hide();
                var1 = var1 + 1;
            }
            this.cracktimer = null;
            this.crackdefaults = null;
            this.crackplane = null;
            this.edoor.hide();
        }
        else {
            this.crackdefaults = [  ];
            this.cracktimer = 0.0;
            this.crackplane = new lego_triggerobject("tps7", this.parent.name);
            this.crackplane.initfull();
            this.crackplane.setresponse(3, 3);
            this.crackparts = [ new lego_moveableobject("dp00", this.parent.name), 
                new lego_moveableobject("dp01", this.parent.name), 
                new lego_moveableobject("dp02", this.parent.name), 
                new lego_moveableobject("dp03", this.parent.name), 
                new lego_moveableobject("dp04", this.parent.name), 
                new lego_moveableobject("dp05", this.parent.name), 
                new lego_moveableobject("dp06", this.parent.name), 
                new lego_moveableobject("dp07", this.parent.name) ];
            var1 = 0;
            while ((this.crackparts.__length - 1) >= var1) {
                this.crackparts[var1].initfull();
                this.crackparts[var1].setmoveable(2.0, 1.0, 0, 0, 0, 0);
                this.crackparts[var1].setresponse(4, 4, 4);
                this.crackparts[var1].setbounceeventrepoert(1);
                this.crackparts[var1].disablecollisions();
                var2 = [  ];
                var3 = this.crackparts[var1].getx();
                var4 = this.crackparts[var1].gety();
                var5 = this.crackparts[var1].getz();
                var2.__append(var3);
                var2.__append(var4);
                var2.__append(var5);
                this.crackdefaults.__append(var2);
                var1 = var1 + 1;
            }
        }
        this.edoor = new lego_moveableobject("mmdr", this.parent.name);
        this.edoor.initfull();
        if (this.showedoor) {
            this.edoor.show();
            this.edoor.setalpha(0.5);
        }
        else if (bettersaver::getbooleanvalue(65)) {
            this.edoor.hide();
        }
        if (this.crackstate == 0) {
            this.edoor.disablecollisions();
        }
        var6 = gcareadirector::getscriptfluffstringuint(scslosifoundation::stringtoidentifier("door"), 1, 0, 60);
        this.edoortext = new gs_legotext("Root/Data/Art/Fonts/BionicleFontHi", var6, screenx * 0.5, screeny * 0.83, 0, 1.5, 256, 4, 0);
        this.edoortext.initfull();
        this.edoortext.add();
        this.edoortexttimer = 0.0;
        var7 = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("when"), 0);
        gccharacter::setinputstate(var7, scslosifoundation::stringtoidentifier("none"));
        gccharacter::setupmoveable(var7, 1.5, 0.8, 1, 0, 0);
        portal_trigger = scslosifoundation::stringtoidentifier("tps9");
        this.portalactive = gcsaver::portalactive();
        if (this.portalactive == 1) {
            gccollisionphysicsgroup::setportal(portal_trigger, "root/data/art/portals/onua/village_ripple/o_prtl", 1);
        }
        else {
            gccollisionphysicsgroup::turnoffnextarea(portal_trigger);
        }
        return null;
    }
    
    method cleanupfull() {
        var var1;
        var var2;
        if (this.edoortext != null) {
            this.edoortext.remove();
            this.edoortext.cleanupfull();
            this.edoortext = null;
        }
        if (this.edoor != null) {
            this.edoor.cleanupfull();
            this.edoor = null;
        }
        if (this.crackparts != null) {
            var1 = this.crackparts.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.crackparts[var1 - var2].cleanupfull();
                this.crackparts[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.crackparts = null;
        }
        this.crackdefaults = null;
        if (this.crackplane != null) {
            this.crackplane.cleanupfull();
            this.crackplane = null;
        }
        if (this.mdoors != null) {
            var1 = this.mdoors.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.mdoors[var1 - var2].cleanupfull();
                this.mdoors[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.mdoors = null;
        }
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
    
    method input(param1) {
        if (param1.event == 2) {
            if (param1.button == 67) {
                if (this.crackstate == 5) {
                    this.resetcrack();
                }
            }
        }
        return null;
    }
    
    method process(param1) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        if (this.crackstate == 0) {
            
        }
        else if (this.crackstate == 1) {
            this.crackplane.setresponse(4, 4);
            this.crackparts[0].setmoveableflags(1, 0, 0, 1);
            this.crackparts[1].setmoveableflags(1, 0, 0, 1);
            this.crackparts[0].setvelocity(-5, 1, 6);
            this.crackparts[1].setvelocity(5, 1, -6);
            this.cracktimer = 0;
            this.crackstate = 2;
        }
        else if (this.crackstate == 2) {
            this.cracktimer = this.cracktimer + param1.deltatime;
            if (this.cracktimer > 0.5) {
                this.crackparts[2].setmoveableflags(1, 0, 0, 1);
                this.crackparts[5].setmoveableflags(1, 0, 0, 1);
                this.crackparts[2].setvelocity(-4, 2, 4);
                this.crackparts[5].setvelocity(-5, 0, 4);
                this.cracktimer = 0;
                this.crackstate = 3;
            }
        }
        else if (this.crackstate == 3) {
            this.cracktimer = this.cracktimer + param1.deltatime;
            if (this.cracktimer > 0.5) {
                this.crackparts[3].setmoveableflags(1, 0, 0, 1);
                this.crackparts[6].setmoveableflags(1, 0, 0, 1);
                this.crackparts[3].setvelocity(3, 1, -6);
                this.crackparts[6].setvelocity(-2, 0, 4);
                this.cracktimer = 0;
                this.crackstate = 4;
            }
        }
        else if (this.crackstate == 4) {
            this.cracktimer = this.cracktimer + param1.deltatime;
            if (this.cracktimer > 0.5) {
                this.crackparts[4].setmoveableflags(1, 0, 0, 1);
                this.crackparts[7].setmoveableflags(1, 0, 0, 1);
                this.crackparts[4].setvelocity(2, 1, -2);
                this.crackparts[7].setvelocity(-1, 0, 1);
                this.cracktimer = 0;
                this.crackstate = 5;
                bettersaver::setbooleanvalue(73, 1);
            }
        }
        else if (this.crackstate == 5) {
            
        }
        if (this.edoortexttimer > 0) {
            this.edoortexttimer = this.edoortexttimer - param1.deltatime;
        }
        else if (this.edoortext.onscreen == 1) {
            this.edoortext.hide();
        }
        var1 = this.mdoors[0].object.getx();
        var2 = this.mdoors[0].object.getz();
        var3 = globalclass.player.actor.getposx();
        var4 = globalclass.player.actor.getposz();
        var5 = var3 - var1;
        var6 = var4 - var2;
        var7 = (var5 * var5) + (var6 * var6);
        if (var7 < 1000) {
            this.mdoors[0].open(5.0);
        }
        else {
            this.mdoors[0].close(3.0);
        }
        return null;
    }
    
    method onevent(param1) {
        var var1;
        var portal_trigger;
        var1 = 0;
        if (this.mdoors != null) {
            while ((this.mdoors.__length - 1) >= var1) {
                this.mdoors[var1].onevent(param1);
                var1 = var1 + 1;
            }
        }
        if (param1.eventid == 41) {
            if (this.portalactive == 0) {
                portal_trigger = scslosifoundation::stringtoidentifier("tps9");
                gccollisionphysicsgroup::turnonnextarea(portal_trigger, scslosifoundation::stringtoidentifier("tura"));
                gccollisionphysicsgroup::setportal(portal_trigger, "root/data/art/portals/onua/village_ripple/o_prtl", 1);
                this.portalactive = 1;
            }
        }
        else if (param1.eventid == 17) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("dp00")) {
                var1 = 0;
                while ((this.crackparts.__length - 1) >= var1) {
                    this.crackparts[var1].fadeout(2.0);
                    this.crackparts[var1].setbounceeventrepoert(0);
                    var1 = var1 + 1;
                }
            }
        }
        else if (param1.eventid == 35) {
            if ((param1.args[0] == scslosifoundation::stringtoidentifier("dp00")) && (param1.args[1] == 0)) {
                var1 = 0;
                while ((this.crackparts.__length - 1) >= var1) {
                    this.crackparts[var1].hide();
                    var1 = var1 + 1;
                }
            }
            if (param1.args[0] == scslosifoundation::stringtoidentifier("mmdr")) {
                this.edoor.hide();
                bettersaver::setbooleanvalue(65, 1)
        }
        else if (param1.eventid == 46) {
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 27) {
            globalclass.player.unkill();
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
        }
        else if (param1.eventid == 7) {
            if (param1.args[2] == scslosifoundation::stringtoidentifier("glyp")) {
                if (this.crackstate == 0) {
                    this.earthquake();
                }
            }
        }
        else if (param1.eventid == 1) {
            if (param1.args[1] == scslosifoundation::stringtoidentifier("mmdr")) {
                if (this.showedoor == 1) {
                    if (globalclass.player.tokens >= 60) {
                        this.edoor.fadeout(1.5);
                        gcstaticsoundsptrarray::playtablesound(1084);
                        this.showedoor = 0;
                        this.edoortext.hide();
                    }
                    else {
                        this.edoortext.show();
                        this.edoortexttimer = 1.0;
                    }
                }
            }
        }
        return null;
    }
    
    method earthquake() {
        this.crackstate = 1;
        this.edoor.enablecollisions();
        return null;
    }
    
    method resetcrack() {
        var var1;
        var var2;
        if (this.crackparts == null) {
            this.crackstate = 0;
            this.initfull();
        }
        else if (this.crackdefaults.__length == this.crackparts.__length) {
            this.crackstate = 0;
            var1 = 0;
            while ((this.crackdefaults.__length - 1) >= var1) {
                var2 = this.crackdefaults[var1];
                this.crackparts[var1].setstationary();
                this.crackparts[var1].setposition(var2[0], var2[1], var2[2]);
                var1 = var1 + 1;
            }
        }
        return null;
    }
}