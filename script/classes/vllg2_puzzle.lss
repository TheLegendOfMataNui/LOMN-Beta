class vllg2_puzzle {
    property parent;
    property oldplatform;
    property newplatform;
    property printwhichplatformimon;
    property puzinc;
    property currentlycollidingwith;
    property tempplatform;
    property canblow;
    property testplatforms;
    property testplatformsubound;
    property callev_safe_time_once;
    property door1;
    property door2;
    property hasenoughtokens;
    property puzzlesolved;
    property deadhives;
    property testfordoor1proximity;
    property door1x;
    property door1z;
    property gatestone;
    property hookbox;
    
    method vllg2_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        var tohunga;
        var hive1handle;
        var hive2handle;
        this.testfordoor1proximity = 0;
        this.puzzlesolved = 0;
        this.hasenoughtokens = 0;
        this.callev_safe_time_once = 1;
        this.door1 = new lego_moveableobject("drs0");
        this.door1.initfull();
        this.door1.setalpha(0.2);
        this.door1x = this.door1.getx();
        this.door1z = this.door1.getz();
        this.door2 = new lego_moveableobject("drs1");
        this.door2.initfull();
        gccharactermoveinterpreter::checkanimdone(scslosifoundation::stringtoidentifier("g054"));
        this.testplatforms = [ new lego_moveableobject("pl01"), 
            new lego_moveableobject("pl02"), 
            new lego_moveableobject("pl03"), 
            new lego_moveableobject("pl04") ];
        var1 = 0;
        while ((this.testplatforms.__length - 1) >= var1) {
            this.testplatforms[var1].initfull();
            this.testplatforms[var1].settweakable();
            this.testplatforms[var1].setresponse(0, 0, 0);
            this.testplatforms[var1].movebboxsides(1.7, 1.7, 1.7, 0 - 1.7, 0 - 1.7, 0 - 1.7);
            var1 = var1 + 1;
        }
        this.testplatformsubound = this.testplatforms.__length - 1;
        this.puzinc = 1;
        this.canblow = 0;
        this.tempplatform = this.testplatforms[0];
        this.tempplatform.collide = 0;
        this.hookbox = new lego_moveableobject("hk01");
        this.hookbox.initfull();
        this.hookbox.setmytargetingflags(1);
        this.hookbox.setresponse(1, 1, 1);
        if (gcsaver::finditem(scslosifoundation::stringtoidentifier("gstn")) == 0) {
            this.gatestone = new lego_pickup("gstn", 0, 5, "item", 7, 1);
            this.gatestone.initfull();
            this.gatestone.show();
            this.gatestone.setcondition(262144);
            this.gatestone.setquest(3);
        }
        this.deadhives = 0;
        if (gcsaver::isconditionset(1073741824)) {
            tohunga = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("vlgr"), 0);
            gccharacter::settohunga(tohunga, rgba(0, 150, 121, 255), rgba(72, 117, 174, 255), scslosifoundation::stringtoidentifier("mk7a"));
            tohunga = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("vl01"), 0);
            gccharacter::settohunga(tohunga, rgba(0, 150, 121, 255), rgba(72, 117, 174, 255), scslosifoundation::stringtoidentifier("mk7a"));
            tohunga = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("vl02"), 0);
            gccharacter::settohunga(tohunga, rgba(0, 0, 255, 255), rgba(0, 0, 255, 255), scslosifoundation::stringtoidentifier("mk7a"));
            gcareadirector::hide(scslosifoundation::stringtoidentifier("ghv0"), scslosifoundation::stringtoidentifier("vllg"));
            gcareadirector::hide(scslosifoundation::stringtoidentifier("ghv1"), scslosifoundation::stringtoidentifier("vllg"));
            globalclass.bgmusic.changefilename("Root/Data/sounds/MusicVillage");
            globalclass.bgmusic.play(1);
        }
        else {
            gcmodeldirector::hide(scslosifoundation::stringtoidentifier("vlgr"), 0);
            gcmodeldirector::hide(scslosifoundation::stringtoidentifier("vl01"), 0);
            gcmodeldirector::hide(scslosifoundation::stringtoidentifier("vl02"), 0);
            hive1handle = gcareadirector::gethive(scslosifoundation::stringtoidentifier("ghv0"));
            gchive::setmaxcreatures(hive1handle, 8);
            gchive::setcreaturetype(hive1handle, scslosifoundation::stringtoidentifier("crb1"));
            gchive::setspawnrate(hive1handle, 5);
            hive2handle = gcareadirector::gethive(scslosifoundation::stringtoidentifier("ghv1"));
            gchive::setmaxcreatures(hive2handle, 8);
            gchive::setcreaturetype(hive2handle, scslosifoundation::stringtoidentifier("crb1"));
            gchive::setspawnrate(hive2handle, 5);
            globalclass.bgmusic.changefilename("Root/Data/sounds/Musicgalitheme");
            globalclass.bgmusic.play();
        }
        return null;
    }
    
    method cleanupfull() {
        var var1;
        this.oldplatform = null;
        this.newplatform = null;
        this.printwhichplatformimon = null;
        this.puzinc = null;
        this.currentlycollidingwith = null;
        this.tempplatform = null;
        this.canblow = null;
        if (this.testplatforms != null) {
            var1 = 0;
            while ((this.testplatforms.__length - 1) >= var1) {
                this.testplatforms[var1].cleanupfull();
                this.testplatforms[var1] = null;
                var1 = var1 + 1;
            }
            this.testplatforms = null;
        }
        if (this.gatestone != null) {
            this.gatestone.cleanupfull();
            this.gatestone = null;
        }
        if (this.hookbox != null) {
            this.hookbox.cleanupfull();
            this.hookbox = null;
        }
        return null;
    }
    
    method process(param1) {
        var var1;
        var var2;
        var var3;
        var1 = 0;
        while (this.testplatformsubound >= var1) {
            this.testplatforms[var1].process();
            var1 = var1 + 1;
        }
        this.tempplatform.process();
        if (this.tempplatform.collide == 0) {
            this.canblow = 0;
        }
        if (this.testfordoor1proximity) {
            var2 = globalclass.player.actor.getposx();
            var3 = globalclass.player.actor.getposz();
            if (var2 >= (this.door1x - 10)) {
                if (var2 <= (this.door1x + 10)) {
                    if (var3 >= (this.door1z - 10)) {
                        if (var3 <= (this.door1z + 10)) {
                            this.openvtnldoor();
                            this.testfordoor1proximity = 0;
                        }
                    }
                }
            }
        }
        return null;
    }
    
    method onevent(param1) {
        if (param1.eventid == 35) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("drs0")) {
                if (param1.args[1] == 0) {
                    this.door1.hide();
                }
            }
        }
        else if (param1.eventid == 51) {
            if (param1.args[1] == 1) {
                this.deadhives = this.deadhives + 1;
                if (this.deadhives >= 2) {
                    gcsaver::setcondition(1073741824, 1);
                    globalclass.bgmusic.changefilename("Root/Data/sounds/MusicVillage");
                    globalclass.bgmusic.play(1);
                }
            }
        }
        else if (param1.eventid == 44) {
            if (this.callev_safe_time_once) {
                if (globalclass.player.getamounttokens() >= 2) {
                    this.hasenoughtokens = 1;
                }
                if (this.hasenoughtokens) {
                    debug::print("**** YOU HAVE ENOUGH TOKENS!!");
                    if (globalclass.player.actor.ishookenabled) {
                        debug::print("****** HOOK IS ENABLED YOU ARE HALF WAY THERE");
                        if (globalclass.player.maskcontrol.isselectable(9)) {
                            debug::print("***** YOU HAVE THE MASK OF TRANSLATION CONGRATS YOU WIN");
                            this.testfordoor1proximity = 1;
                            this.callev_safe_time_once = 0;
                        }
                    }
                }
            }
        }
        else if (param1.eventid == 1) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("cnt1")) {
                if (param1.args[1] != scslosifoundation::stringtoidentifier("cnt1")) {
                    this.newplatform = param1.args[1];
                    if (this.oldplatform != this.newplatform) {
                        this.printwhichplatformimon = 1;
                    }
                    if (this.printwhichplatformimon) {
                        debug::print("You're on platform " + scslosifoundation::identifiertostring(param1.args[1]));
                        this.oldplatform = param1.args[1];
                        this.printwhichplatformimon = 0;
                    }
                }
            }
            if (param1.args[2] == 0) {
                if (param1.args[0] == scslosifoundation::stringtoidentifier("cnt1")) {
                    if (param1.args[1] == this.testplatforms[0].id) {
                        this.currentlycollidingwith = this.testplatforms[0].id;
                        this.tempplatform = this.testplatforms[0];
                        this.canblow = 1;
                        this.tempplatform.setcollide();
                    }
                    else if (param1.args[1] == this.testplatforms[1].id) {
                        this.currentlycollidingwith = this.testplatforms[1].id;
                        this.tempplatform = this.testplatforms[1];
                        this.canblow = 1;
                        this.tempplatform.setcollide();
                    }
                    else if (param1.args[1] == this.testplatforms[2].id) {
                        this.currentlycollidingwith = this.testplatforms[2].id;
                        this.tempplatform = this.testplatforms[2];
                        this.canblow = 1;
                        this.tempplatform.setcollide();
                    }
                    else if (param1.args[1] == this.testplatforms[3].id) {
                        this.currentlycollidingwith = this.testplatforms[3].id;
                        this.tempplatform = this.testplatforms[3];
                        this.canblow = 1;
                        this.tempplatform.setcollide();
                    }
                }
            }
        }
        else if (param1.eventid == 11) {
            if (scslosifoundation::identifiertostring(param1.args[1]) == "g054") {
                debug::print("***** GETTING THE ANIM_FINISHED EVENT FOR go54");
                globalclass.player.actor.setinputstate("ninp");
                globalclass.level.cam.setaimode(11);
                if (this.puzzlesolved) {
                    this.opendoortoevac();
                    this.puzzlesolved = 0;
                }
            }
        }
        else if (param1.eventid == 27) {
            globalclass.player.unkill();
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.actor.switchanimation(scslosifoundation::stringtoidentifier("g000"));
            this.parent.level.cam.setaimode(11);
        }
        else if (param1.eventid == 12) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("drs1")) {
                globalclass.player.actor.setinputstate("ninp");
                globalclass.level.cam.setaimode(11);
            }
        }
        else if (param1.eventid == 3) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tb00")) {
                if (param1.args[1] == 1) {
                    globalclass.player.canshootdragger(0);
                }
                else if (param1.args[1] == 0) {
                    globalclass.player.canshootdragger(1);
                }
            }
        }
        if (param1.eventid == 42) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("watr")) {
                gctoa::deactivatedragger(globalclass.player.actor.toahandle);
            }
        }
        return null;
    }
    
    method input(param1) {
        if (param1.button == 90) {
            if (param1.event == 2) {
                this.cheat(1);
            }
        }
        if (param1.button == 231) {
            if (param1.event == 2) {
                this.blowtheconch();
            }
        }
        if (param1.button == 88) {
            if (param1.event == 2) {
                this.cheat(2);
            }
        }
        if (param1.button == 67) {
            if (param1.event == 2) {
                this.cheat(3);
            }
        }
        return null;
    }
    
    method cheat(param1) {
        if (param1 == 1) {
            globalclass.player.addtoken(1);
        }
        else if (param1 == 2) {
            globalclass.player.actor.setpos(0 - 0.4, 52.8, 0 - 52.0);
        }
        else if (param1 == 3) {
            this.opendoortoevac();
        }
        return null;
    }
    
    method blowtheconch() {
        var var1;
        var var2;
        var var3;
        if (this.canblow) {
            if ((globalclass.player.actor.getorientation() > -45) && (globalclass.player.actor.getorientation() < 45)) {
                globalclass.player.actor.setorientation(-1);
                if (this.currentlycollidingwith == this.testplatforms[0].id) {
                    debug::print("******* BLOWING CONCH 1");
                    var1 = this.testplatforms[0].getx();
                    var2 = this.testplatforms[0].gety();
                    var3 = this.testplatforms[0].getz();
                    gcstaticsoundsptrarray::playtablesound(1044);
                    globalclass.player.actor.setpos(var1, var2, var3);
                    globalclass.player.actor.setinputstate("none");
                    globalclass.player.actor.setsplitanimation(scslosifoundation::stringtoidentifier("g054"));
                    if (this.puzinc < 8) {
                        if ((this.puzinc == 1) || (this.puzinc == 6)) {
                            this.puzinc = this.puzinc + 1;
                        }
                        else {
                            this.puzinc = 1;
                        }
                    }
                }
                else if (this.currentlycollidingwith == this.testplatforms[1].id) {
                    debug::print("******* BLOWING CONCH 2");
                    var1 = this.testplatforms[1].getx();
                    var2 = this.testplatforms[1].gety();
                    var3 = this.testplatforms[1].getz();
                    gcstaticsoundsptrarray::playtablesound(1045);
                    globalclass.player.actor.setpos(var1, var2, var3);
                    globalclass.player.actor.setinputstate("none");
                    globalclass.player.actor.setsplitanimation(scslosifoundation::stringtoidentifier("g054"));
                    if (this.puzinc < 8) {
                        if (this.puzinc == 4) {
                            this.puzinc = this.puzinc + 1;
                        }
                        else {
                            this.puzinc = 1;
                        }
                    }
                }
                else if (this.currentlycollidingwith == this.testplatforms[2].id) {
                    debug::print("******* BLOWING CONCH 3");
                    var1 = this.testplatforms[2].getx();
                    var2 = this.testplatforms[2].gety();
                    var3 = this.testplatforms[2].getz();
                    gcstaticsoundsptrarray::playtablesound(1046);
                    globalclass.player.actor.setpos(var1, var2, var3);
                    globalclass.player.actor.setinputstate("none");
                    globalclass.player.actor.setsplitanimation(scslosifoundation::stringtoidentifier("g054"));
                    if (this.puzinc < 8) {
                        if ((this.puzinc == 2) || (this.puzinc == 7)) {
                            if (this.puzinc == 7) {
                                debug::print("************** CONGRATS PUZZLE SOLVED");
                                this.puzzlesolved = 1;
                            }
                            this.puzinc = this.puzinc + 1;
                        }
                        else {
                            this.puzinc = 1;
                        }
                    }
                }
                else if (this.currentlycollidingwith == this.testplatforms[3].id) {
                    debug::print("******* BLOWING CONCH 4");
                    var1 = this.testplatforms[3].getx();
                    var2 = this.testplatforms[3].gety();
                    var3 = this.testplatforms[3].getz();
                    gcstaticsoundsptrarray::playtablesound(1047);
                    globalclass.player.actor.setpos(var1, var2, var3);
                    globalclass.player.actor.setinputstate("none");
                    globalclass.player.actor.setsplitanimation(scslosifoundation::stringtoidentifier("g054"));
                    if (this.puzinc < 8) {
                        if ((this.puzinc == 3) || (this.puzinc == 5)) {
                            this.puzinc = this.puzinc + 1;
                        }
                        else {
                            this.puzinc = 1;
                        }
                    }
                }
            }
            else {
                debug::print("you are not within the orientation range limit....");
            }
        }
        return null;
    }
    
    method openvtnldoor() {
        this.door1.fadeout(2.0);
        return null;
    }
    
    method opendoortoevac() {
        var var1;
        var var2;
        var var3;
        var1 = this.door2.getx();
        var2 = this.door2.gety();
        var3 = this.door2.getz();
        globalclass.level.cam.setaimode(0);
        globalclass.level.cam.setpos(0 - 3.6, 61.0, 0 - 110.6);
        globalclass.level.cam.settargetpos(var1, var2, var3);
        globalclass.level.cam.shakecamera(2.45, 0.5);
        globalclass.player.actor.setinputstate("none");
        this.door2.interpolate(var1, var2 + 9.5, var3, 2.5);
        return null;
    }
}