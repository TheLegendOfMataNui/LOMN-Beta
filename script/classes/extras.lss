class extras {
    property parent;
    property curoption;
    property mousex;
    property mousey;
    property optarray;
    property backoption;
    property active;
    property extratext;
    property printmenu;
    property glossary;
    property minidx;
    property maxidx;
    property showidx;
    property x;
    property y;
    property curidx;
    property activemenu;
    property backmenu;
    property menuactive;
    property curscreen;
    
    method extras(param1) {
        this.parent = param1;
        this.active = 0;
        return null;
    }

    method setupoutsidescreens() {
        this.printmenu = new gsprintmenu(this);
        this.glossary = new gsglossary(this);
        return null;
    }
    
    method initfull() {
        var var1;
        var1 = 0;
        this.curoption = -1;
        this.optarray = [  ];
        this.printmenu = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 20), "", this.optarray.__length);
        this.printmenu.initfull();
        this.optarray.__append(this.printmenu);
        this.glossary = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 40), "", this.optarray.__length);
        this.glossary.initfull();
        this.optarray.__append(this.glossary);
        this.backoption = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 3), "", this.optarray.__length);
        this.backoption.initfull();
        this.optarray.__append(this.backoption);
        this.active = 1;
        this.setupoutsidescreens();
        return null;
    }
    
    method cleanupfull() {
        if (!(this.optarray == null)) {
            this.cleanupshort();
        }
        this.parent = null;
        return null;
    }
    
    method cleanupshort() {
        var var1;
        var var2;
        if (!(this.optarray == null)) {
            var1 = this.optarray.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.optarray[var1 - var2].cleanupfull();
                this.optarray[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.optarray = null;
        }
        this.backoption = null;
        return null;
    }
    
    method input(param1) {
        if (this.active) {
            if (this.curoption == 2) {
				debug::print("[][][] back");
                this.back();
            }
            else if (this.curscreen == 4) {
                this.glossary.input(param1);
            }
            else if (this.curscreen == 5) {
                this.printmenu.input(param1);
            }
        }
        return null;
    }
    
    method onevent(param1) {
        if (this.active) {
            if (param1.eventid == 25) {
                debug::print("[][][] mouse button released : " + __tostring(param1.args[0]));
                this.mousebuttonreleased(param1.args[0]);
            }
            else if (param1.eventid == 26) {
                this.mousex = param1.args[0];
                this.mousey = param1.args[1];
                this.checkmousepos();
            }
        }
        else if (this.curscreen == 4) {
            this.glossary.onevent(param1);
        }
        else if (this.curscreen == 5) {
            this.printmenu.onevent(param1);
        }
        return null;
    }
    
    method checkmousepos() {
        var var1;
        var var2;
        var1 = -1;
        var2 = 0;
        while ((this.optarray.__length - 1) >= var2) {
            if (this.optarray[var2].check(this.mousex, this.mousey) == 1) {
                var1 = var2;
            }
            var2 = var2 + 1;
        }
        if (!(var1 == -1)) {
            this.curoption = var1;
        }
        return null;
    }
    
    method mousebuttonreleased(param1) {
        if (this.curoption == -1) {
            
        }
        else if (this.curoption == 2) {
			debug::print("[][][] back");
			this.back();
        }
        else if (this.curoption == 0) {
            this.glossary.initfull();
            this.gotodifferentscreen(null, 4);
            this.active = 0;
            gcstaticsoundsptrarray::playtablesound(1072);
        }
        else if (this.curoption == 1) {
            this.printmenu.initfull();
            this.gotodifferentscreen(null, 5);
            this.active = 0;
            gcstaticsoundsptrarray::playtablesound(1072);
        }
        else {
            gcstaticsoundsptrarray::playtablesound(1072);
        }
        this.curoption;
        return null;
    }

    method gotodifferentscreen(param1, param2) {
        var var1;
        var var2;
        this.curscreen = param2;
        if (!(param1 == null)) {
            this.maxidx = param1.__length - 1;
            var1 = 0;
            while (this.maxidx >= var1) {
                var2 = new gs_legotext("Root/Data/Art/Fonts/BionicleFont", param1[var1][0], param1[var1][1], param1[var1][2], 0, 2.0, 0, 4, 0, 1);
                var2.initfull();
                var2.add();
                if (var1 <= this.showidx) {
                    var2.show();
                }
                this.backmenu.__append(var2);
                var2 = new gs_legoactivetext("Root/Data/Art/Fonts/BionicleFont", "Root/Data/Art/Fonts/BionicleFontHi", param1[var1][0], param1[var1][1], param1[var1][2], 0, 2.0, 0, 4, 0, 0);
                var2.initfull();
                var2.add();
                if (var1 <= this.showidx) {
                    var2.show();
                }
                this.activemenu.__append(var2);
                var1 = var1 + 1;
            }
            this.activemenu[0].setactive();
            this.menuactive = 1;
        }
        else {
            this.menuactive = 0;
        }
        this.curidx = 0;
        return null;
    }
    
    method back() {
        debug::print("[][][] back");
        this.active = 0;
        this.cleanupshort();
        this.parent.back();
        gcstaticsoundsptrarray::playtablesound(1073);
        return null;
    }
}