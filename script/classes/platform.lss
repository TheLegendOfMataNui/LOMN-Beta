class platform {
    property id;
    property name;
    property obj;
    property objid;
    property objname;
    property area;
    property curentpospoint;
    property originalpospoint;
    property shakevector;
    property shakerotate;
    property bouncevector;
    property patharray;
    property pathpoint;
    property vectorshakearray;
    property rotateshakearray;
    property bouncearray;
    property temppoint;
    property needtomove;
    property touched;
    property haspath;
    property objwillfall;
    property vectorshakewhentouched;
    property rotateshakewhentouched;
    property vectorshaking;
    property rotateshaking;
    property bouncing;
    property falltimerstarted;
    property dropping;
    property exploding;
    property paused;
    property falltimer;
    property falltimerid;
    property falltimername;
    property hidetimer;
    property hidetimerid;
    property hidetimername;
    property particaltime;
    property langthofexplotion;
    property maintimer;
    property frequency;
    property curentarrayposition;
    property curent_bounce_arrayposition;
    property curent_vectorshake_arrayposition;
    property curent_rotateshake_arrayposition;
    property explodeparticals;
    property platformfallingsound;
    property platformrumblesound;
    property dropsoundonce;
    
    method platform(param1, param2) {
        var var1;
        this.obj = new lego_physicsobject(param1, param2);
        this.objid = this.obj.id;
        this.id = this.obj.id;
        this.objname = scslosifoundation::identifiertostring(this.obj.id);
        this.name = scslosifoundation::identifiertostring(this.obj.id);
        this.dropsoundonce = 1;
        if (param2 == null) {
            this.area = "fake";
        }
        else {
            this.area = param2;
        }
        this.curentpospoint = new basicpoint(0.0, 0.0, 0.0);
        this.originalpospoint = new basicpoint(0.0, 0.0, 0.0);
        this.shakevector = new basicpoint(0.0, 0.0, 0.0);
        this.shakerotate = new basicpoint(0.0, 0.0, 0.0);
        this.bouncevector = new basicpoint(0.0, 0.0, 0.0);
        this.pathpoint = new basicpoint(0.0, 0.0, 0.0);
        this.temppoint = new basicpoint(0.0, 0.0, 0.0);
        this.rotateshakearray = [  ];
        this.vectorshakearray = [  ];
        this.patharray = [  ];
        this.bouncearray = [  ];
        this.touched = 0;
        var1 = 0;
        this.bouncing = 0;
        this.needtomove = 0;
        this.haspath = 0;
        this.falltimerstarted = 0;
        this.objwillfall = 0;
        this.vectorshakewhentouched = 0;
        this.rotateshakewhentouched = 0;
        this.vectorshaking = 0;
        this.rotateshaking = 0;
        this.dropping = 0;
        this.exploding = 0;
        this.paused = 0;
        this.falltimer = null;
        this.falltimerid = null;
        this.falltimername = null;
        this.hidetimer = null;
        this.hidetimerid = null;
        this.hidetimername = null;
        this.particaltime = 0;
        this.langthofexplotion = 10.0;
        this.maintimer = 0.0;
        this.frequency = 40;
        this.curentarrayposition = 0;
        this.curent_bounce_arrayposition = 0;
        this.curent_vectorshake_arrayposition = 0;
        this.curent_rotateshake_arrayposition = 0;
        this.platformfallingsound = null;
        this.platformrumblesound = null;
        return null;
    }
    
    method initfull(param1, param2, param3, param4, param5, param6, param7, param8) {
        this.obj.initfull(null, 0, 0, 0, 0, null, param1, param2, null, param3, param4, param5, param6, param7, param8);
        this.obj.setresponse(1, 0, 1);
        this.curentpospoint.x = this.obj.getx();
        this.curentpospoint.y = this.obj.gety();
        this.curentpospoint.z = this.obj.getz();
        this.originalpospoint.x = this.obj.getx();
        this.originalpospoint.y = this.obj.gety();
        this.originalpospoint.z = this.obj.getz();
        return null;
    }
    
    method show() {
        this.obj.show();
        return null;
    }
    
    method hide() {
        this.obj.hide();
        return null;
    }
    
    method cleanupfull() {
        this.remove();
        this.platformfallingsound = null;
        this.platformrumblesound = null;
        return null;
    }
    
    method remove() {
        this.obj.cleanupfull();
        this.obj = null;
        if (!(this.falltimer == null)) {
            this.falltimer.cleanupfull();
        }
        if (!(this.hidetimer == null)) {
            this.hidetimer.cleanupfull();
        }
        return null;
    }
    
    method onevent(param1) {
        if (param1.eventid == 12) {
            if (param1.args[0] == this.objid) {
                this.needtomove = 1;
            }
        }
        else if (param1.eventid == 1) {
            if (param1.args[1] == this.objid) {
                if (param1.args[0] == scslosifoundation::stringtoidentifier("cnt1")) {
                    this.touch();
                }
            }
        }
        else if (param1.eventid == 8) {
            if (param1.args[0] == this.falltimerid) {
                this.drop();
            }
            if (param1.args[0] == this.hidetimerid) {
                this.obj.hide();
            }
        }
        return null;
    }
    
    method pause(param1) {
        if (param1) {
            this.paused = 1;
        }
        else {
            this.paused = 0;
        }
        return null;
    }
    
    method process(param1) {
        var var1;
        this.maintimer = this.maintimer + param1.deltatime;
        if (this.paused == 0) {
            
        }
        if (this.maintimer >= (1 / this.frequency)) {
            if (this.dropping == 0) {
                if (this.vectorshaking) {
                    var1 = __toint(this.maintimer * this.frequency);
                    this.curent_vectorshake_arrayposition = (this.curent_vectorshake_arrayposition + var1) % (this.vectorshakearray.__length - 1);
                    this.shakevector = this.vectorshakearray[this.curent_vectorshake_arrayposition];
                }
                if (this.rotateshaking) {
                    var1 = __toint(this.maintimer * this.frequency);
                    this.curent_rotateshake_arrayposition = (this.curent_rotateshake_arrayposition + var1) % (this.rotateshakearray.__length - 1);
                    this.shakerotate = this.rotateshakearray[this.curent_rotateshake_arrayposition];
                }
                if (this.bouncing) {
                    var1 = __toint(this.maintimer * this.frequency);
                    this.curent_bounce_arrayposition = (this.curent_bounce_arrayposition + var1) % (this.bouncearray.__length - 1);
                    this.bouncevector = this.bouncearray[this.curent_bounce_arrayposition];
                }
                if (this.haspath) {
                    var1 = __toint(this.maintimer * this.frequency);
                    this.curentarrayposition = (this.curentarrayposition + var1) % (this.patharray.__length - 1);
                    this.pathpoint = this.patharray[this.curentarrayposition];
                }
                this.moveobj();
                this.maintimer = 0.0;
            }
        }
        if (this.exploding) {
            this.particaltime = this.particaltime + param1.deltatime;
            if (this.langthofexplotion < this.particaltime) {
                this.particaltime = 0;
                this.exploding = 0;
            }
        }
        return null;
    }
    
    method moveobj() {
        this.temppoint.setto(0, 0, 0);
        if (this.rotateshaking) {
            this.obj.setorientation(this.shakerotate.x, this.shakerotate.y, this.shakerotate.z);
        }
        if (this.vectorshaking) {
            this.temppoint.plusequal(this.shakevector);
        }
        if (this.bouncing) {
            this.temppoint.plusequal(this.bouncevector);
        }
        if (this.haspath) {
            this.curentpospoint.add(this.temppoint, this.pathpoint);
        }
        else {
            this.curentpospoint.add(this.temppoint, this.originalpospoint);
        }
        this.obj.setposition(this.curentpospoint.x, this.curentpospoint.y, this.curentpospoint.z);
        return null;
    }
    
    method drop() {
        if (!(this.platformfallingsound == null)) {
            if (this.dropsoundonce) {
                this.platformfallingsound.play();
                this.dropsoundonce = 0;
            }
        }
        this.dropping = 1;
        this.explode();
        this.obj.setmoveableflags(1, 1, 0, 1);
        this.obj.setrollangle(5, 5, 5);
        if (!(this.hidetimer == null)) {
            this.hidetimer.reset(0);
            this.hidetimer.start();
        }
        return null;
    }
    
    method setposition(param1, param2, param3) {
        this.obj.setposition(param1, param2, param3);
        return null;
    }
    
    method setpos(param1, param2, param3) {
        this.obj.setpos(param1, param2, param3);
        return null;
    }
    
    method settweakable() {
        this.obj.settweakable();
        return null;
    }
    
    method setresponse(param1, param2, param3) {
        this.obj.setresponse(param1, param2, param3);
        return null;
    }
    
    method explode() {
        this.exploding = 1;
        return null;
    }
    
    method reset() {
        this.hide();
        this.dropsoundonce = 1;
        if (this.objwillfall) {
            this.falltimer.stop();
            this.falltimer.reset(0);
        }
        this.setposition(this.originalpospoint.x, this.originalpospoint.y, this.originalpospoint.z);
        this.obj.setmoveableflags(0, 0, 0, 0);
        this.obj.setorientation(0.0, 0.0, 0.0);
        this.obj.setvelocity(0.0, 0.0, 0.0);
        this.dropping = 0;
        this.falltimerstarted = 0;
        this.touched = 0;
        this.vectorshaking = 0;
        this.rotateshaking = 0;
        this.show();
        return null;
    }
    
    method touch() {
        if (this.touched == 0) {
            debug::print(__tostring(this.name) + " has been touched, playing the sound....");
            this.touched = 1;
            if (this.objwillfall) {
                this.platformrumblesound.play();
                this.falltimer.start();
            }
            if (this.vectorshakewhentouched) {
                this.vectorshaking = 1;
            }
            if (this.rotateshakewhentouched) {
                this.rotateshaking = 1;
            }
        }
        return null;
    }
    
    method setuppath(param1, param2) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        this.haspath = 1;
        var1 = 0;
        while ((param1.__length - 1) >= var1) {
            if (var1 < (param1.__length - 1)) {
                var2 = var1 + 1;
            }
            else {
                var2 = 0;
            }
            var3 = param2[var1] * this.frequency;
            if (var3 < 1) {
                var3 = 1;
            }
            var4 = 0;
            while (var3 >= var4) {
                var5 = gcscripttools::getxdivisionalong3dline(param1[var1].x, param1[var1].y, param1[var1].z, param1[var2].x, param1[var2].y, param1[var2].z, var3, var4);
                var6 = gcscripttools::getydivisionalong3dline(param1[var1].x, param1[var1].y, param1[var1].z, param1[var2].x, param1[var2].y, param1[var2].z, var3, var4);
                var7 = gcscripttools::getzdivisionalong3dline(param1[var1].x, param1[var1].y, param1[var1].z, param1[var2].x, param1[var2].y, param1[var2].z, var3, var4);
                this.temppoint = new basicpoint(var5, var6, var7);
                this.patharray.__append(this.temppoint);
                var4 = var4 + 1;
            }
            if ((this.patharray.__length - 1) < 1) {
                this.haspath = 0;
            }
            var1 = var1 + 1;
        }
        return null;
    }
    
    method setupbounce(param1, param2, param3, param4, param5, param6, param7) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        var var8;
        var var9;
        var var10;
        var var11;
        this.bouncing = 1;
        var1 = new basicpoint(param1, param3, param5);
        var2 = new basicpoint(0 - param1, 0 - param3, 0 - param5);
        var3 = [ var1, 
            var2 ];
        var4 = [ param7, 
            param7 ];
        var5 = 0;
        while ((var3.__length - 1) >= var5) {
            if (var5 < (var3.__length - 1)) {
                var6 = var5 + 1;
            }
            else {
                var6 = 0;
            }
            var7 = var4[var5] * this.frequency;
            if (var7 < 1) {
                var7 = 1;
            }
            var8 = 0;
            while (var7 >= var8) {
                var9 = gcscripttools::getxdivisionalong3dline(var3[var5].x, var3[var5].y, var3[var5].z, var3[var6].x, var3[var6].y, var3[var6].z, var7, var8);
                var10 = gcscripttools::getydivisionalong3dline(var3[var5].x, var3[var5].y, var3[var5].z, var3[var6].x, var3[var6].y, var3[var6].z, var7, var8);
                var11 = gcscripttools::getzdivisionalong3dline(var3[var5].x, var3[var5].y, var3[var5].z, var3[var6].x, var3[var6].y, var3[var6].z, var7, var8);
                this.temppoint = new basicpoint(var9, var10, var11);
                this.bouncearray.__append(this.temppoint);
                var8 = var8 + 1;
            }
            if ((this.bouncearray.__length - 1) < 1) {
                this.bouncing = 0;
            }
            var5 = var5 + 1;
        }
        return null;
    }
    
    method setuptouchshakerotate(param1, param2, param3, param4) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        var var8;
        this.rotateshakewhentouched = 1;
        var1 = new basicpoint(param1, param2, param3);
        var2 = new basicpoint(0 - param1, 0 - param2, 0 - param3);
        var3 = [ var1, 
            var2 ];
        var4 = [ param4, 
            param4 ];
        var5 = 0;
        while ((var3.__length - 1) >= var5) {
            if (var5 < (var3.__length - 1)) {
                var6 = var5 + 1;
            }
            else {
                var6 = 0;
            }
            var7 = var4[var5] * this.frequency;
            if (var7 < 1) {
                var7 = 1;
            }
            var8 = 0;
            while (var7 >= var8) {
                param1 = gcscripttools::getxdivisionalong3dline(var3[var5].x, var3[var5].y, var3[var5].z, var3[var6].x, var3[var6].y, var3[var6].z, var7, var8);
                param2 = gcscripttools::getydivisionalong3dline(var3[var5].x, var3[var5].y, var3[var5].z, var3[var6].x, var3[var6].y, var3[var6].z, var7, var8);
                param3 = gcscripttools::getzdivisionalong3dline(var3[var5].x, var3[var5].y, var3[var5].z, var3[var6].x, var3[var6].y, var3[var6].z, var7, var8);
                this.temppoint = new basicpoint(param1, param2, param3);
                this.rotateshakearray.__append(this.temppoint);
                var8 = var8 + 1;
            }
            if ((this.rotateshakearray.__length - 1) < 1) {
                this.rotateshakewhentouched = 0;
            }
            var5 = var5 + 1;
        }
        return null;
    }
    
    method setuptouchshakevector(param1, param2, param3, param4) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        var var8;
        this.vectorshakewhentouched = 1;
        var1 = new basicpoint(param1, param2, param3);
        var2 = new basicpoint(0 - param1, 0 - param2, 0 - param3);
        var3 = [ var1, 
            var2 ];
        var4 = [ param4, 
            param4 ];
        var5 = 0;
        while ((var3.__length - 1) >= var5) {
            if (var5 < (var3.__length - 1)) {
                var6 = var5 + 1;
            }
            else {
                var6 = 0;
            }
            var7 = var4[var5] * this.frequency;
            if (var7 < 1) {
                var7 = 1;
            }
            var8 = 0;
            while (var7 >= var8) {
                param1 = gcscripttools::getxdivisionalong3dline(var3[var5].x, var3[var5].y, var3[var5].z, var3[var6].x, var3[var6].y, var3[var6].z, var7, var8);
                param2 = gcscripttools::getydivisionalong3dline(var3[var5].x, var3[var5].y, var3[var5].z, var3[var6].x, var3[var6].y, var3[var6].z, var7, var8);
                param3 = gcscripttools::getzdivisionalong3dline(var3[var5].x, var3[var5].y, var3[var5].z, var3[var6].x, var3[var6].y, var3[var6].z, var7, var8);
                this.temppoint = new basicpoint(param1, param2, param3);
                this.vectorshakearray.__append(this.temppoint);
                var8 = var8 + 1;
            }
            if ((this.vectorshakearray.__length - 1) < 1) {
                this.vectorshakewhentouched = 0;
            }
            var5 = var5 + 1;
        }
        return null;
    }
    
    method setupfall(param1, param2, param3, param4) {
        if (!(param3 == null)) {
            this.hidetimerid = scslosifoundation::stringtoidentifier(param4);
            this.hidetimername = param4;
            this.hidetimer = new lego_timer(param4, param3, 0);
            this.hidetimer.initfull();
        }
        this.objwillfall = 1;
        this.falltimerid = scslosifoundation::stringtoidentifier(param2);
        this.falltimername = param2;
        this.falltimer = new lego_timer(param2, param1, 0);
        this.falltimer.initfull();
        this.setupsounds();
        return null;
    }
    
    method setupsounds(param1, param2) {
        if (!(param1 == null)) {
            this.platformrumblesound = new tablecopysound(param1);
            this.platformrumblesound.synctoobject(this.id);
        }
        else {
            this.platformrumblesound = new tablecopysound(1039);
            this.platformrumblesound.synctoobject(this.id);
        }
        if (!(param2 == null)) {
            this.platformfallingsound = new tablecopysound(param2);
            this.platformfallingsound.synctoobject(this.id);
        }
        else {
            this.platformfallingsound = new tablecopysound(1038);
            this.platformfallingsound.synctoobject(this.id);
        }
        return null;
    }
}