class acmaskpuzzle {
    property parent;
    property bully;
    property setupbullai;
    property mask;
    property cinema1;
    property cinema2;
    property cinema1_shown;
    property cinema2_shown;
    property wallchunks;
    property blockplane;
    property showintro;
    property desctext;
    property howtotext;
	property printglyph;
    
    method acmaskpuzzle(param1) {
        this.parent = param1;
        this.cinema1_shown = 0;
        this.cinema2_shown = 0;
        return null;
    }
    
    method initfull() {
        var var1;
        var kapura;
        var bosstext;
        globalclass.bgmusic.changefilename("Root/Data/sounds/MUSICLEGODrumAndBassPart1");
        globalclass.bgmusic.play(1);
        kapura = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("vlgr"), 0);
        gccharacter::setkapura(kapura);
        gcareadirector::setnearestmax(50);
        gcmodeldirector::setnearestmax(10);
        gcareadirector::setfog(-1, 0 - 20.0, 0 - 600.0, 0.05);
        gclightdirector::setcavelighting(0);
        this.bully = new gs_lego_character("cbly", "bull", this.parent.name, 0, 0, 0, 0, "aiin");
        this.bully.initfull();
        this.bully.add();
        this.bully.show();
        this.setupbullai = 1;
        gccharacter::aisetbecomeshappy(this.bully.handle, 0);
        this.bully.setpos(79.0, 0.15, 161.0);
        gccharacter::addmask(this.bully.handle, scslosifoundation::stringtoidentifier("mklf"), "mask");
        gccharacter::addmask(this.bully.handle, scslosifoundation::stringtoidentifier("mkrt"), "mask");
        gccharacter::switchmask(this.bully.handle, scslosifoundation::stringtoidentifier("mklf"));
        gccharacter::switchsecondmask(this.bully.handle, scslosifoundation::stringtoidentifier("mkrt"));
        gccharactermoveinterpreter::checkanimdone(scslosifoundation::stringtoidentifier("p047"));
        if (gcsaver::findmask(scslosifoundation::stringtoidentifier("mska")) == 0) {
            this.mask = new lego_pickup("mska", 10, 1, "item", 1, 1);
            this.mask.initfull();
            this.mask.show();
        }
        if (this.cinema1_shown == 0) {
            this.cinema1 = gccinemaengine::create();
            gccinemaengine::load(this.cinema1, "cin2");
        }
        if (this.cinema2_shown == 0) {
            this.cinema2 = gccinemaengine::create();
            gccinemaengine::load(this.cinema2, "cin3");
        }
        this.wallchunks = [ new lego_moveableobject("brk1"), 
            new lego_moveableobject("brk2"), 
            new lego_moveableobject("brk3"), 
            new lego_moveableobject("brk4"), 
            new lego_moveableobject("brk5"), 
            new lego_moveableobject("brk6"), 
            new lego_moveableobject("brk7"), 
            new lego_moveableobject("brk8"), 
            new lego_moveableobject("brk9") ];
        var1 = 0;
        while ((this.wallchunks.__length - 1) >= var1) {
            this.wallchunks[var1].initfull();
            this.wallchunks[var1].setresponse(3, 3, 3);
            this.wallchunks[var1].movebboxsides(3, 2, 2, -3, -2, -2);
            var1 = var1 + 1;
        }
        this.blockplane = new lego_triggerobject("tp02", "blcv", 0);
        this.blockplane.initfull();
        this.blockplane.setresponse(3, 3);
        if (gcsaver::isconditionset(536870912)) {
            this.showintro = 0;
        }
        else {
            this.showintro = 1;
            bosstext = gcareadirector::getscriptstring(scslosifoundation::stringtoidentifier("boss"), 1, 0);
            this.desctext = new gs_legotext("Root/Data/Art/Fonts/BionicleFontHi", bosstext, screenx * 0.5, screeny - 130, 0, 1, 256, 0, 0);
            this.desctext.initfull();
            bosstext = gcareadirector::getscriptstring(scslosifoundation::stringtoidentifier("boss"), 1, 1);
            this.howtotext = new gs_legotext("Root/Data/Art/Fonts/BionicleFont", bosstext, screenx * 0.5, (screeny - 100) + 20, 0, 1, 256, 0, 0);
            this.howtotext.initfull();
        }
        if (gcsaver::finditem(scslosifoundation::stringtoidentifier("pgl3")) == 0) {
            this.printglyph = new lego_pickup("pgl3", 0, 7, "item", 4, 0);
            this.printglyph.initfull();
        }
        else {
            this.printglyph = new lego_moveableobject("pgl3");
            this.printglyph.initfull();
            this.printglyph.hide();
        }
        return null;
    }
    
    method cleanupfull() {
        var var1;
        if (this.wallchunks != null) {
            var1 = 0;
            while ((this.wallchunks.__length - 1) >= var1) {
                this.wallchunks[var1].cleanupfull();
                this.wallchunks[var1] = null;
                var1 = var1 + 1;
            }
            this.wallchunks = null;
        }
        if (this.mask != null) {
            this.mask.cleanupfull();
            this.mask = null;
        }
        if (this.desctext != null) {
            this.desctext.cleanupfull();
            this.desctext = null;
        }
        if (this.howtotext != null) {
            this.howtotext.cleanupfull();
            this.howtotext = null;
        }
        if (this.blockplane != null) {
            this.blockplane.cleanupfull();
            this.blockplane = null;
        }
        if (this.bully != null) {
            this.bully.cleanupfull();
            this.bully = null;
        }
        this.cinema1 = null;
        this.cinema2 = null;
        if (this.printglyph != null) {
            this.printglyph.cleanupfull();
            this.printglyph = null;
        }
        return null;
    }
    
    method process(param1) {
        var var1;
        var var2;
        if (this.setupbullai) {
            this.setupbullai = 0;
            this.bully.aisethandlereaction(0);
        }
        if (this.cinema2_shown == 0) {
            if (globalclass.player.ismaskpoweron() == 1) {
                if (globalclass.player.whichmaskonface() == 10) {
                    var1 = this.bully.getpos();
                    var2 = globalclass.player.actor.getpos();
                    if (((((var1.x1 - var2.x1) < 10) && ((var1.x1 - var2.x1) > -10)) && ((var1.z - var2.z) < 10)) && ((var1.z - var2.z) > -10)) {
                        globalclass.hud.hide();
                        gccinemaengine::play(this.cinema2);
                        this.cinema2_shown = 1;
                        globalclass.player.maskcontrol.toggleactive();
                        globalclass.hud.mask.hide();
                    }
                }
            }
        }
        return null;
    }
    
    method input(param1) {
        if ((param1.event == 2) && (param1.button == 251)) {
            if (this.cinema1 != null) {
                gccinemaengine::stop(this.cinema1);
            }
            if (this.cinema2 != null) {
                gccinemaengine::stop(this.cinema2);
                if (this.cinema2_shown == 1) {
                    globalclass.bgmusic.stop();
                }
            }
        }
        return null;
    }
    
    method onevent(param1) {
        if (param1.eventid == 3) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tb00")) {
                this.parent.level.cam.setaimode(7);
                globalclass.player.kill();
                gcstaticsoundsptrarray::playtablesound(1048);
                globalclass.player.actor.setinputstate("none");
            }
        }
        else if (param1.eventid == 11) {
			if ((scslosifoundation::identifiertostring(param1.args[1]) == "p047") && (gcsaver::findmask(scslosifoundation::stringtoidentifier("mska")))) {
                gccinemaengine::play(this.cinema1);
                this.cinema1_shown = 1;
                this.bully.aiidle();
                this.bully.setpos(79.0, 0.15, 161.0);
                this.bully.disableanim(scslosifoundation::stringtoidentifier("bl08"));
                this.bully.disableanim(scslosifoundation::stringtoidentifier("bl09"));
                this.bully.aipatrol();
                if (globalclass.player.maskcontrol.isactive()) {
                    globalclass.player.maskcontrol.toggleactive();
                    globalclass.hud.mask.hide();
                }
            }
        }
        else if (param1.eventid == 46) {
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 27) {
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.unkill();
            gccollisionphysicsgroup::toggletriggerboxentered(scslosifoundation::stringtoidentifier("tb00"), 0);
            globalclass.player.actor.setinputstate("ninp");
            globalclass.player.actor.switchanimation(scslosifoundation::stringtoidentifier("p000"));
            this.parent.level.cam.setaimode(11);
            this.bully.setpos(79.0, 0.15, 161.0);
        }
        else if (param1.eventid == 30) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("cin2")) {
                this.bully.setpos(79.0, 0.15, 161.0);
                globalclass.bgmusic.changefilename("Root/Data/sounds/MUSICpohatutheme");
                globalclass.bgmusic.play(1);
            }
        }
        else if (param1.eventid == 6) {
            this.parent.level.cam.setaimode(11);
            this.parent.level.cam.resetviewport();
            globalclass.hud.show();
            this.desctext.hide();
            this.howtotext.hide();
        }
        else if (param1.eventid == 44) {
            if (this.showintro) {
                this.playintro();
            }
        }
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }

    method playintro() {
        this.parent.level.cam.scaletocutscene();
        this.parent.level.cam.makespline("Root/Data/Levels/lev3/blcv/blcv_CAM.slb");
        this.parent.level.cam.setspline(0, 10.0, 1, 0);
        this.parent.level.cam.settargetpos(79.0, 0.15, 161.0);
        this.parent.level.cam.setaimode(2);
        globalclass.hud.hide();
        gcsaver::setcondition(536870912, 1);
        this.desctext.add();
        this.desctext.show();
        this.howtotext.add();
        this.howtotext.show();
        this.showintro = 0;
        return null;
    }
}