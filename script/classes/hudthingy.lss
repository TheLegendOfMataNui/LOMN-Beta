class hudthingy {
    property partsarray;
    property headrotate;
    property glowyeyes;
    property lifebar;
    property energybar;
    property redlites;
    property greenlites;
    property movement;
    property onscreen;
    property offx;
    property timeonscreen;
    
    method hudthingy() {
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        this.partsarray = [  ];
        this.headrotate = new ss_basesprite("Root/data/art/hud/turnhead", 10, 20, 0, 74, 84);
        this.partsarray.__append(this.headrotate);
        this.glowyeyes = [ new ss_basesprite("Root/data/art/hud/greeneyesoff", 9, 21, 0, 73, 85), 
            new ss_basesprite("Root/data/art/hud/greeneyeson", 9, 21, 0, 73, 85) ];
        this.partsarray.__append(this.glowyeyes);
        this.lifebar = [ new ss_basesprite("Root/data/art/hud/16x16frntend__clr", 74, 36, 0, 90, 52) ];
        var1 = __toint(3);
        var2 = 0;
        while ((var1 - 1) >= var2) {
            var3 = new ss_basesprite("Root/data/art/hud/16x16circle__clr", 90 + (16 * var2), 36, 0, 106 + (16 * var2), 52);
            this.lifebar.__append(var3);
            var2 = var2 + 1;
        }
        var4 = this.lifebar.__length - 1;
        this.lifebar.__append(new ss_basesprite("Root/data/art/hud/16x16end__clr", this.lifebar[var4].x1 + 15, this.lifebar[var4].y1, 0, this.lifebar[var4].x2 + 15, this.lifebar[var4].y2));
        this.partsarray.__append(this.lifebar);
        var5 = this.lifebar.__length;
        this.energybar = [ new ss_basesprite("Root/data/art/hud/16x16frntend__clr", 74, 64, 0, 90, 80) ];
        var1 = __toint(3);
        var2 = 0;
        while ((var1 - 1) >= var2) {
            var3 = new ss_basesprite("Root/data/art/hud/16x16circle__clr", 90 + (16 * var2), 64, 0, 106 + (16 * var2), 80);
            this.energybar.__append(var3);
            var2 = var2 + 1;
        }
        var4 = this.energybar.__length - 1;
        this.energybar.__append(new ss_basesprite("Root/data/art/hud/16x16end__clr", this.energybar[var4].x1 + 15, this.energybar[var4].y1, 0, this.energybar[var4].x2 + 15, this.energybar[var4].y2));
        this.partsarray.__append(this.energybar);
        this.redlites = [  ];
        var4 = this.lifebar.__length - 1;
        var2 = 0;
        while ((var4 - 2) >= var2) {
            this.redlites.__append(new ss_basesprite("Root/data/art/hud/littleWhiteLight", 90 + (16 * var2), 36, 0, 106 + (16 * var2), 52));
            var2 = var2 + 1;
        }
        this.partsarray.__append(this.redlites);
        this.greenlites = [  ];
        var4 = this.energybar.__length - 1;
        var2 = 0;
        while ((var4 - 2) >= var2) {
            this.greenlites.__append(new ss_basesprite("Root/data/art/hud/littleWhiteLight", 90 + (16 * var2), 64, 0, 106 + (16 * var2), 80));
            var2 = var2 + 1;
        }
        this.partsarray.__append(this.greenlites);
        var2 = 0;
        while ((this.partsarray.__length - 1) >= var2) {
            if (__isarray(this.partsarray[var2])) {
                var6 = this.partsarray[var2];
                var7 = 0;
                while ((var6.__length - 1) >= var7) {
                    var6[var7].initfull();
                    var6[var7].enablealphachannel(1);
                    var7 = var7 + 1;
                }
            }
            else {
                this.partsarray[var2].initfull();
                this.partsarray[var2].enablealphachannel(1);
            }
            var2 = var2 + 1;
        }
        return null;
    }
    
    method cleanupfull() {
        var var1;
        var var2;
        if (!(this.greenlites == null)) {
            var1 = this.greenlites.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.greenlites[var1 - var2].hide();
                this.greenlites[var1 - var2].remove();
                this.greenlites[var1 - var2].cleanupfull();
                this.greenlites[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.greenlites = null;
        }
        if (!(this.redlites == null)) {
            var1 = this.redlites.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.redlites[var1 - var2].hide();
                this.redlites[var1 - var2].remove();
                this.redlites[var1 - var2].cleanupfull();
                this.redlites[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.redlites = null;
        }
        if (!(this.energybar == null)) {
            var1 = this.energybar.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.energybar[var1 - var2].hide();
                this.energybar[var1 - var2].cleanupfull();
                this.energybar[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.energybar = null;
        }
        if (!(this.lifebar == null)) {
            var1 = this.lifebar.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.lifebar[var1 - var2].hide();
                this.lifebar[var1 - var2].remove();
                this.lifebar[var1 - var2].cleanupfull();
                this.lifebar[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.lifebar = null;
        }
        if (!(this.glowyeyes == null)) {
            var1 = this.glowyeyes.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.glowyeyes[var1 - var2].hide();
                this.glowyeyes[var1 - var2].remove();
                this.glowyeyes[var1 - var2].cleanupfull();
                this.glowyeyes[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.glowyeyes = null;
        }
        if (!(this.headrotate == null)) {
            this.headrotate.hide();
            this.headrotate.remove();
            this.headrotate.cleanupfull();
            this.headrotate = null;
        }
        if (!(this.partsarray == null)) {
            var1 = this.partsarray.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.partsarray[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.partsarray = null;
        }
        return null;
    }
    
    method initshort() {
        return null;
    }
    
    method cleanupshort() {
        this.hide();
        return null;
    }
    
    method add() {
        var var1;
        var var2;
        var var3;
        var1 = 0;
        while ((this.partsarray.__length - 1) >= var1) {
            if (__isarray(this.partsarray[var1])) {
                var2 = this.partsarray[var1];
                var3 = 0;
                while ((var2.__length - 1) >= var3) {
                    var2[var3].add();
                    var3 = var3 + 1;
                }
            }
            else {
                this.partsarray[var1].add();
            }
            var1 = var1 + 1;
        }
        return null;
    }
    
    method show() {
        var var1;
        var var2;
        var var3;
        if (globalclass.hud.hidden == 0) {
            var1 = 0;
            while ((this.partsarray.__length - 1) >= var1) {
                if (__isarray(this.partsarray[var1])) {
                    var2 = this.partsarray[var1];
                    var3 = 0;
                    while ((var2.__length - 1) >= var3) {
                        var2[var3].show();
                        var3 = var3 + 1;
                    }
                }
                else {
                    this.partsarray[var1].show();
                }
                var1 = var1 + 1;
            }
            globalclass.player.removelife(0);
            globalclass.player.removeenergy(0);
            this.glowyeyes[0].hide();
        }
        return null;
    }
    
    method hide() {
        var var1;
        var var2;
        var var3;
        this.fadeeyes(0);
        var1 = 0;
        while ((this.partsarray.__length - 1) >= var1) {
            if (__isarray(this.partsarray[var1])) {
                var2 = this.partsarray[var1];
                var3 = 0;
                while ((var2.__length - 1) >= var3) {
                    var2[var3].hide();
                    var3 = var3 + 1;
                }
            }
            else {
                this.partsarray[var1].hide();
            }
            var1 = var1 + 1;
        }
        return null;
    }
    
    method changepos(param1) {
        return null;
    }
    
    method setxpos(param1) {
        return null;
    }
    
    method process(param1) {
        return null;
    }
    
    method onevent(param1) {
        return null;
    }
    
    method slide(param1) {
        return null;
    }
    
    method fadeeyes(param1) {
        if (globalclass.hud.hidden == 0) {
            if (param1 == 1) {
                this.glowyeyes[0].show();
            }
            else {
                this.glowyeyes[0].hide();
                this.glowyeyes[1].hide();
            }
        }
        return null;
    }
    
    method setlife(param1) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var1 = __tofloat(param1) / 20;
        debug::print((("[][][] Life = " + __tostring(param1)) + " Num = ") + __tostring(var1));
        if (var1 >= this.redlites.__length) {
            while (var1 > this.redlites.__length) {
                var2 = this.redlites.__length;
                this.redlites.__append(new ss_basesprite("Root/data/art/hud/littleWhiteLight", 90 + (16 * var2), 36, 0, 106 + (16 * var2), 52));
                this.redlites[var2].initfull();
                this.redlites[var2].add();
                this.redlites[var2].enablealphachannel(1);
            }
        }
        else {
            while (var1 < (this.redlites.__length - 1)) {
                var3 = this.redlites.__length - 1;
                this.redlites[var3].hide();
                this.redlites[var3].cleanupfull();
                this.redlites.__removeat(var3);
            }
        }
        var3 = this.redlites.__length - 1;
        var4 = 0;
        while (var3 >= var4) {
            if (!(var4 == var3)) {
                this.redlites[var4].setcolor(255, 0, 0, 255);
            }
            var4 = var4 + 1;
        }
        var1 = var1 - var3;
        debug::print("[][][] num = " + __tostring(var1));
        var5 = 1;
        if (var1 >= 1) {
            this.redlites[var3].setcolor(255, 0, 0, 255);
        }
        else if (var1 >= 0.75) {
            this.redlites[var3].setcolor(180, 0, 0, 255);
        }
        else if (var1 >= 0.5) {
            this.redlites[var3].setcolor(120, 0, 0, 255);
        }
        else if (var1 >= 0.25) {
            this.redlites[var3].setcolor(60, 0, 0, 255);
        }
        else {
            var5 = 0;
        }
        if (globalclass.hud.hidden == 0) {
            var4 = 0;
            while ((this.redlites.__length - 1) >= var4) {
                this.redlites[var4].show();
                if (var5 == 0) {
                    this.redlites[var3].hide();
                }
                var4 = var4 + 1;
            }
        }
        return null;
    }
    
    method setenergy(param1) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var1 = __tofloat(param1) / 20;
        debug::print("[][][] set Energy = " + __tostring(param1));
        if (var1 >= this.greenlites.__length) {
            while (var1 > this.greenlites.__length) {
                var2 = this.greenlites.__length;
                this.greenlites.__append(new ss_basesprite("Root/data/art/hud/littleWhiteLight", 90 + (16 * var2), 64, 0, 106 + (16 * var2), 80));
                this.greenlites[var2].initfull();
                this.greenlites[var2].add();
                this.greenlites[var2].enablealphachannel(1);
            }
        }
        else {
            while (var1 < (this.greenlites.__length - 1)) {
                var3 = this.greenlites.__length - 1;
                this.greenlites[var3].hide();
                this.greenlites[var3].cleanupfull();
                this.greenlites.__removeat(var3);
            }
        }
        var3 = this.greenlites.__length - 1;
        var4 = 0;
        while (var3 >= var4) {
            if (!(var4 == var3)) {
                this.greenlites[var4].setcolor(0, 255, 0, 255);
            }
            var4 = var4 + 1;
        }
        var1 = var1 - var3;
        debug::print("[][][] num = " + __tostring(var1));
        var5 = 1;
        if (var1 >= 1) {
            this.greenlites[var3].setcolor(0, 255, 0, 255);
        }
        else if (var1 >= 0.75) {
            this.greenlites[var3].setcolor(0, 180, 0, 255);
        }
        else if (var1 >= 0.5) {
            this.greenlites[var3].setcolor(0, 120, 0, 255);
        }
        else if (var1 >= 0.25) {
            this.greenlites[var3].setcolor(0, 60, 0, 255);
        }
        else {
            var5 = 0;
        }
        if (globalclass.hud.hidden == 0) {
            var4 = 0;
            while ((this.greenlites.__length - 1) >= var4) {
                this.greenlites[var4].show();
                if (var5 == 0) {
                    this.greenlites[var3].hide();
                }
                var4 = var4 + 1;
            }
        }
        return null;
    }
    
    method setmaxlife(param1) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var1 = __tofloat(param1) / 20;
        var2 = this.lifebar.__length - 2;
        if (var1 > var2) {
            while (var1 > var2) {
                var3 = this.lifebar.__length - 1;
                var4 = new ss_basesprite("Root/data/art/hud/16x16circle__clr", this.lifebar[var3].x1, this.lifebar[var3].y1, 0, this.lifebar[var3].x2, this.lifebar[var3].y2);
                var4.initfull();
                var4.enablealphachannel(1);
                var4.add();
                if (globalclass.hud.hidden == 0) {
                    var4.show();
                }
                this.lifebar.__insertat(var3, var4);
                this.lifebar[var3 + 1].changepos(16, 0);
                var2 = var2 + 1;
            }
        }
        else if (var1 < var2) {
            while (var1 < var2) {
                var5 = (this.lifebar.__length - 1) - 1;
                this.lifebar[var5].hide();
                this.lifebar[var5].cleanupfull();
                this.lifebar.__removeat(var5);
                this.lifebar[var5].changepos(-16, 0);
                var2 = var2 - 1;
            }
        }
        return null;
    }
    
    method setmaxenergy(param1) {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var1 = __tofloat(param1) / 20;
        var2 = this.energybar.__length - 2;
        if (var1 > var2) {
            while (var1 > var2) {
                debug::print("[][][] add max energy");
                var3 = this.energybar.__length - 1;
                var4 = new ss_basesprite("Root/data/art/hud/16x16circle__clr", this.energybar[var3].x1, this.energybar[var3].y1, 0, this.energybar[var3].x2, this.energybar[var3].y2);
                var4.initfull();
                var4.enablealphachannel(1);
                var4.add();
                if (globalclass.hud.hidden == 0) {
                    var4.show();
                }
                this.energybar.__insertat(var3, var4);
                this.energybar[var3 + 1].changepos(16, 0);
                var2 = var2 + 1;
            }
        }
        else if (var1 < var2) {
            while (var1 < var2) {
                debug::print("[][][] remove max energy");
                var5 = (this.energybar.__length - 1) - 1;
                this.energybar[var5].hide();
                this.energybar[var5].cleanupfull();
                this.energybar.__removeat(var5);
                this.energybar[var5].changepos(-16, 0);
                var2 = var2 - 1;
            }
        }
        return null;
    }
}