class graphicsoptions {
    property parent;
    property curoption;
    property mousex;
    property mousey;
    property optarray;
    property fogoption;
    property fogvalue;
    property gammaoption;
    property gammavalue;
    property particledetailoption;
    property particledetailvalue;
    property shadowdetailoption;
    property shadowdetailvalue;
    property backoption;
    property active;
    
    method graphicsoptions(param1) {
        this.parent = param1;
        this.active = 0;
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        var1 = 0;
        this.curoption = -1;
        this.optarray = [  ];
        this.gammavalue = gcsaver::getgamma();
        this.gammaoption = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 18), __tostring(this.gammavalue), this.optarray.__length, 2, __toint((this.gammavalue - 190) / (130 * 0.01)));
        this.gammaoption.initfull();
        this.optarray.__append(this.gammaoption);
        this.fogvalue = gcsaver::getfog();
        if (this.fogvalue) {
            var2 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 34);
        }
        else {
            var2 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 33);
        }
        this.fogoption = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 15), var2, this.optarray.__length, 1, null);
        this.fogoption.initfull();
        this.optarray.__append(this.fogoption);
        this.particledetailvalue = gcsaver::getparticledetail();
        this.particledetailoption = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 36), __tostring(this.particledetailvalue), this.optarray.__length, 2, this.particledetailvalue);
        this.particledetailoption.initfull();
        this.optarray.__append(this.particledetailoption);
        this.shadowdetailvalue = gcsaver::getshadowdetail();
        if (this.shadowdetailvalue == 0) {
            var2 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 33);
        }
        else if (this.shadowdetailvalue == 1) {
            var2 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 28);
        }
        else if (this.shadowdetailvalue == 2) {
            var2 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 22);
        }
        this.shadowdetailoption = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 46), var2, this.optarray.__length, 1, null);
        this.shadowdetailoption.initfull();
        this.optarray.__append(this.shadowdetailoption);
        this.backoption = new menuoption(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 3), "", this.optarray.__length);
        this.backoption.initfull();
        this.optarray.__append(this.backoption);
        this.active = 1;
        return null;
    }
    
    method cleanupfull() {
        if (!(this.optarray == null)) {
            this.cleanupshort();
        }
        this.parent = null;
        return null;
    }
    
    method cleanupshort() {
        var var1;
        var var2;
        var var3;
        var var4;
        var var5;
        var var6;
        var var7;
        var var8;
        if (!(this.optarray == null)) {
            var1 = this.optarray.__length - 1;
            var2 = 0;
            while (var1 >= var2) {
                this.optarray[var1 - var2].cleanupfull();
                this.optarray[var1 - var2] = null;
                var2 = var2 + 1;
            }
            this.optarray = null;
        }
        var3 = null;
        var4 = null;
        var5 = null;
        this.fogoption = null;
        this.gammaoption = null;
        var6 = null;
        var7 = null;
        this.particledetailoption = null;
        this.shadowdetailoption = null;
        var8 = null;
        this.backoption = null;
        return null;
    }
    
    method input(param1) {
        if (this.active) {
            if (this.curoption == 0) {
                
            }
            else if (this.curoption == 1) {
                
            }
            else if (this.curoption == 2) {
                
            }
            else if (this.curoption == 3) {
                
            }
            if (param1.event == 2) {
                if ((param1.button == 27) || (param1.button == 8)) {
                    this.back();
                }
            }
        }
        return null;
    }
    
    method onevent(param1) {
        if (this.active) {
            this.gammaoption.onevent(param1);
            this.particledetailoption.onevent(param1);
            if (param1.eventid == 25) {
                debug::print("[][][] mouse button released : " + __tostring(param1.args[0]));
                this.mousebuttonreleased(param1.args[0]);
            }
            else if (param1.eventid == 26) {
                this.mousex = param1.args[0];
                this.mousey = param1.args[1];
                this.checkmousepos();
            }
        }
        return null;
    }
    
    method checkmousepos() {
        var var1;
        var var2;
        var1 = -1;
        var2 = 0;
        while ((this.optarray.__length - 1) >= var2) {
            if (this.optarray[var2].check(this.mousex, this.mousey) == 1) {
                var1 = var2;
            }
            var2 = var2 + 1;
        }
        if (!(var1 == -1)) {
            this.curoption = var1;
        }
        return null;
    }
    
    method mousebuttonreleased(param1) {
        this.gammavalue = __toint(190 + (130 * (this.gammaoption.getslidervalue() * 0.01)));
        debug::print("[][][] set gamma to " + __tostring(this.gammavalue));
        gcsaver::setgamma(this.gammavalue);
        this.particledetailvalue = this.particledetailoption.getslidervalue();
        gcsaver::setparticledetail(this.particledetailvalue);
        if (this.curoption == -1) {
            
        }
        else if (this.curoption == 1) {
            this.setfogvalue();
            gcstaticsoundsptrarray::playtablesound(1072);
        }
        else if (this.curoption == 3) {
            this.setshadowvalue();
            gcstaticsoundsptrarray::playtablesound(1072);
        }
        else if (this.curoption == 4) {
            this.back();
        }
        else {
            gcstaticsoundsptrarray::playtablesound(1072);
        }
        this.curoption;
        return null;
    }
    
    method setfogvalue() {
        var var1;
        if (this.fogvalue) {
            this.fogvalue = 0;
            var1 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 33);
        }
        else {
            this.fogvalue = 1;
            var1 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 34);
        }
        gcsaver::setfog(this.fogvalue);
        this.fogoption.setrighttext(var1);
        return null;
    }
    
    method setshadowvalue() {
        var var1;
        if (this.shadowdetailvalue == 0) {
            this.shadowdetailvalue = 1;
            var1 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 28);
        }
        else if (this.shadowdetailvalue == 1) {
            this.shadowdetailvalue = 2;
            var1 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 22);
        }
        else if (this.shadowdetailvalue == 2) {
            this.shadowdetailvalue = 0;
            var1 = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 33);
        }
        gcsaver::setshadowdetail(this.shadowdetailvalue);
        this.shadowdetailoption.setrighttext(var1);
        return null;
    }
    
    method back() {
        debug::print("[][][] back");
        this.active = 0;
        this.cleanupshort();
        this.parent.back();
        gcstaticsoundsptrarray::playtablesound(1073);
        return null;
    }
}