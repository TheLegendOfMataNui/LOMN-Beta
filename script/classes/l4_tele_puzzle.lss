class l4_tele_puzzle {
    property parent;
    property switch1;
    property teleblock;
    property mask;
    property exitdoor;
    property switchuppos;
    property switchdownpos;
    property collide;
    property hitswitch;
    property shakeonce;
    property hittrigerbox;
    
    method l4_tele_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        gcareadirector::setnearestmax(50);
        if (gcsaver::findmask(scslosifoundation::stringtoidentifier("mtel")) == 0) {
            this.mask = new lego_pickup("mtel", 11, 1, "item", 2, 1);
            this.mask.initfull();
            this.mask.show();
        }
        this.switch1 = new lego_moveableobject("sw00");
        this.switch1.initfull();
        this.switchuppos = new basicpoint(this.switch1.getx(), this.switch1.gety(), this.switch1.getz());
        this.switchdownpos = new basicpoint(this.switch1.getx(), this.switch1.gety() - 0.8, this.switch1.getz());
        this.switch1.setresponse(0, 0, 0);
        this.switch1.setignoreallcollisions(0);
        this.teleblock = new lego_moveableobject("tblk");
        this.teleblock.initfull();
        this.teleblock.setmytargetingflags(4);
        this.teleblock.setmoveable(1.0, 0.8, 1, 0, 1, 1);
        this.teleblock.settweakable();
        this.teleblock.setignoreallcollisions(0);
        this.exitdoor = new teledoor();
        this.exitdoor.initfull();
        var1 = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("vlgr"), 0);
        gccharacter::setkapura(var1);
        var2 = gcareadirector::gethive(scslosifoundation::stringtoidentifier("ghv0"));
        gchive::setmaxcreatures(var2, 2);
        gchive::setcreaturetype(var2, scslosifoundation::stringtoidentifier("lsrp"));
        gchive::setspawnrate(var2, 4);
        this.hitswitch = 0;
        this.shakeonce = 1;
        this.collide = 0;
        this.hittrigerbox = 0;
        return null;
    }
    
    method initshort() {
        globalclass.player.unkill();
        globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
        if (this.hittrigerbox) {
            gccollisionphysicsgroup::toggletriggerboxentered(scslosifoundation::stringtoidentifier("tb00"), 0);
            this.parent.level.cam.setaimode(11);
            this.hittrigerbox = 0;
        }
        return null;
    }
    
    method show() {
        return null;
    }
    
    method hide() {
        var var1;
        var1 = null;
        if (!(this.mask == null)) {
            this.mask.cleanupfull();
            this.mask = null;
        }
        this.switch1.cleanupfull();
        this.switch1 = null;
        this.teleblock.cleanupfull();
        this.teleblock = null;
        this.exitdoor.cleanupfull();
        this.exitdoor = null;
        return null;
    }
    
    method onevent(param1) {
        this.switch1.onevent(param1);
        if (param1.eventid == 1) {
            if (param1.args[1] == scslosifoundation::stringtoidentifier("sw00")) {
                if (param1.args[2]) {
                    this.hitswitch(0);
                }
                else {
                    this.hitswitch(1);
                }
            }
            param1.args[1];
        }
        else if (param1.eventid == 3) {
            this.hittrigerbox = 1;
            this.parent.level.cam.setaimode(7);
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 27) {
            if (this.hittrigerbox) {
                globalclass.player.kill();
            }
            else {
                this.initshort();
            }
        }
        else if (param1.eventid == 46) {
            if (this.hittrigerbox) {
                this.initshort();
            }
        }
        else if (param1.eventid == 7) {
            if (param1.args[2] == scslosifoundation::stringtoidentifier("Ecut")) {
                gcstaticsoundsptrarray::playtablesound(149);
            }
        }
        return null;
    }
    
    method hitswitch(param1) {
        if (!(this.hitswitch == param1)) {
            this.hitswitch = param1;
            if (param1) {
                this.switch1.setpos(this.switchdownpos);
                this.exitdoor.open(1);
            }
            else {
                this.switch1.setpos(this.switchuppos);
                this.exitdoor.open(0);
            }
        }
        return null;
    }
    
    method process(param1) {
        this.switch1.process();
        if (this.teleblock.gety() < -200) {
            this.teleblock.setpos(319.2, 8.3, 0 - 887.6);
        }
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
}