class shrn2_puzzle {
    property parent;
    property doorsclosed;
    property doors;
    property callev_safe_time_event_once;
    property portalactive;
    property bossdoortext;
    property bossdoortexttimer;
    property showbossdoor;
    
    method shrn2_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        var nokama;
        var portal_trigger;
        var door_text;
        gcmodeldirector::setnearestmax(7);
        gcareadirector::setnearestmax(7);
        gcareadirector::setfog(-9143565, 0 - 1000.0, 0 - 2400.0, 0.01);
        gclightdirector::setcavelighting(0);
        this.doorsclosed = [ 1, 
            1 ];
        this.callev_safe_time_event_once = 1;
        globalclass.bgmusic.changefilename("Root/Data/sounds/MusicShrine");
        globalclass.bgmusic.play();
        this.doors = [ new lego_moveableobject("dor1"), 
            new lego_moveableobject("dor2") ];
        var1 = 0;
        while ((this.doors.__length - 1) >= var1) {
            this.doors[var1].initfull();
            this.doors[var1].settweakable();
            var1 = var1 + 1;
        }
        nokama = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("noka"), 0);
        gccharacter::setinputstate(nokama, scslosifoundation::stringtoidentifier("none"));
        gccharacter::switchanimation(nokama, scslosifoundation::stringtoidentifier("no00"), -1);
        portal_trigger = scslosifoundation::stringtoidentifier("tps9");
        this.portalactive = gcsaver::portalactive();
        if (this.portalactive == 1) {
            gccollisionphysicsgroup::setportal(portal_trigger, "root/data/art/portals/gali/village_ripple/g_prtl", 1);
        }
        else {
            gccollisionphysicsgroup::turnoffnextarea(portal_trigger);
        }
        if (bettersaver::getbooleanvalue(66) == 0) {
            this.showbossdoor = 1;
            this.doors[1].setalpha(0.8);
        }
        else {
            this.doors[1].hide();
        }
        door_text = gcareadirector::getscriptfluffstringuint(scslosifoundation::stringtoidentifier("door"), 1, 0, 8);
        this.bossdoortext = new gs_legotext("Root/Data/Art/Fonts/BionicleFontHi", door_text, screenx * 0.5, screeny * 0.83, 0, 1.5, 256, 4, 0);
        this.bossdoortext.initfull();
        this.bossdoortext.add();
        this.bossdoortexttimer = 0.0;
        return null;
    }
    
    method cleanupfull() {
        var var1;
        if (this.doors != null) {
            var1 = 0;
            while ((this.doors.__length - 1) >= var1) {
                this.doors[var1].cleanupfull();
                this.doors[var1] = null;
                var1 = var1 + 1;
            }
            this.doors = null;
        }
        if (this.bossdoortext != null) {
            this.bossdoortext.remove();
            this.bossdoortext.cleanupfull();
            this.bossdoortext = null;
        }
        this.doorsclosed = null;
        return null;
    }
    
    method process(param1) {
        if (this.bossdoortexttimer > 0) {
            this.bossdoortexttimer = this.bossdoortexttimer - param1.deltatime;
        }
        else if (this.bossdoortext.onscreen == 1) {
            this.bossdoortext.hide();
        }
        return null;
    }
    
    method onevent(param1) {
        var portal_trigger;
        var var2;
        if (param1.eventid == 35) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("dor2")) {
                bettersaver::setbooleanvalue(66, 1);
                this.doors[1].hide();
            }
        }
        else if (param1.eventid == 41) {
            if (this.portalactive == 0) {
                portal_trigger = scslosifoundation::stringtoidentifier("tps9");
                gccollisionphysicsgroup::turnonnextarea(portal_trigger, scslosifoundation::stringtoidentifier("tura"));
                gccollisionphysicsgroup::setportal(portal_trigger, "root/data/art/portals/gali/village_ripple/g_prtl", 1);
                this.portalactive = 1;
            }
        }
        else if (param1.eventid == 44) {
            if (this.callev_safe_time_event_once) {
                var2 = 0;
                while (1 >= var2) {
                    this.movedoorsdown(var2);
                    var2 = var2 + 1;
                }
                this.callev_safe_time_event_once = 0;
            }
        }
        else if (param1.eventid == 46) {
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 27) {
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.unkill();
        }
        else if (param1.eventid == 1) {
            if (param1.args[1] == scslosifoundation::stringtoidentifier("dor2")) {
                if (this.showbossdoor == 1) {
                    if (((((globalclass.player.tokens >= 8) && (globalclass.player.maskcontrol.isselectable(1)) && (globalclass.player.maskcontrol.isselectable(9)) && (globalclass.player.actor.ishookenabled) && (globalclass.player.haselement()))))) {
                        this.doors[1].fadeout(1.5);
                        gcstaticsoundsptrarray::playtablesound(1084);
                        this.showbossdoor = 0;
                        this.bossdoortext.hide();
                    }
                    else {
                        this.bossdoortext.show();
                        this.bossdoortexttimer = 1.0;
                    }
                }
            }
        }
        return null;
    }
    
    method input(param1) {
        if (param1.button == 90) {
            if (param1.event == 2) {
                this.cheat(0);
            }
        }
        if (param1.button == 88) {
            if (param1.event == 2) {
                this.cheat(1);
            }
        }
        if (param1.button == 67) {
            if (param1.event == 2) {
                this.cheat(2);
            }
        }
        return null;
    }
    
    method movedoorsdown(param1) {
        var var1;
        var var2;
        var var3;
        var1 = param1;
        if (var1 == 0) {
            if (this.doorsclosed[var1]) {
                debug::print(("*****DOOR " + __tostring(var1)) + " GOES DOWN");
                var2 = this.doors[var1].getx();
                var3 = this.doors[var1].getz();
                this.doors[var1].interpolate(var2, 21.0, var3, 1.0);
            }
            else {
                debug::print(("*****DOOR " + __tostring(var1)) + " GOES UP");
                var2 = this.doors[var1].getx();
                var3 = this.doors[var1].getz();
                this.doors[var1].interpolate(var2, 37.0, var3, 1.0);
            }
        }
        else if (var1 == 1) {
            if (this.doorsclosed[var1]) {
                
            }
            else {
                this.doors[1].fadeout(2.0);
            }
        }
        return null;
    }
    
    method cheat(param1) {
        var var1;
        var1 = param1;
        if (var1 == 0) {
            if (this.doorsclosed[0]) {
                this.doorsclosed[0] = 0;
                this.movedoorsdown(var1);
            }
            else {
                this.doorsclosed[0] = 1;
                this.movedoorsdown(var1);
            }
        }
        else if (var1 == 1) {
            if (this.doorsclosed[1]) {
                this.doorsclosed[1] = 0;
                this.movedoorsdown(var1);
            }
            else {
                this.doorsclosed[1] = 1;
                this.movedoorsdown(var1);
            }
        }
        else if (var1 == 2) {
            globalclass.player.addtoken(1);
        }
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
}