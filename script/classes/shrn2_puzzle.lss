class shrn2_puzzle {
    property parent;
    property doorsclosed;
    property doors;
    property callev_safe_time_event_once;
    property portalactive;
    property testbossdoorproximity;
    property bdoorx;
    property bdoorz;
    
    method shrn2_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        var var3;
        this.testbossdoorproximity = 0;
        this.doorsclosed = [ 1, 
            1 ];
        this.callev_safe_time_event_once = 1;
        globalclass.bgmusic.changefilename("Root/Data/sounds/MusicShrine");
        globalclass.bgmusic.play();
        this.doors = [ new lego_moveableobject("dor1"), 
            new lego_moveableobject("dor2") ];
        var1 = 0;
        while ((this.doors.__length - 1) >= var1) {
            this.doors[var1].initfull();
            this.doors[var1].settweakable();
            var1 = var1 + 1;
        }
        this.doors[1].setalpha(0.8);
        this.bdoorx = this.doors[1].getx();
        this.bdoorz = this.doors[1].getz();
        var2 = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("noka"), 0);
        gccharacter::setinputstate(var2, scslosifoundation::stringtoidentifier("none"));
        gccharacter::setupmoveable(var2, 1.5, 0.8, 1, 0, 0);
        var3 = scslosifoundation::stringtoidentifier("tps9");
        this.portalactive = gcsaver::portalactive();
        if (this.portalactive == 1) {
            gccollisionphysicsgroup::setportal(var3, "root/data/art/portals/gali/village_ripple/g_prtl", 1);
        }
        else {
            gccollisionphysicsgroup::turnoffnextarea(var3);
        }
        return null;
    }
    
    method cleanupfull() {
        var var1;
        var1 = 0;
        while ((this.doors.__length - 1) >= var1) {
            this.doors[var1].cleanupfull();
            this.doors[var1] = null;
            var1 = var1 + 1;
        }
        this.doors = null;
        return null;
    }
    
    method process(param1) {
        var var1;
        var var2;
        if (this.testbossdoorproximity) {
            var1 = globalclass.player.actor.getposx();
            var2 = globalclass.player.actor.getposz();
            if (var1 >= (this.bdoorx - 10)) {
                if (var1 <= (this.bdoorx + 10)) {
                    if (var2 >= (this.bdoorz - 10)) {
                        if (var2 <= (this.bdoorz + 10)) {
                            this.doorsclosed[1] = 0;
                            this.movedoorsdown(1);
                            this.testbossdoorproximity = 0;
                        }
                    }
                }
            }
        }
        return null;
    }
    
    method onevent(param1) {
        var var1;
        var var2;
        if (param1.eventid == 35) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("dor2")) {
                if (param1.args[1] == 0) {
                    this.doors[1].hide();
                }
                param1.args[1];
            }
            param1.args[0];
        }
        else if (param1.eventid == 41) {
            if (this.portalactive == 0) {
                var1 = scslosifoundation::stringtoidentifier("tps9");
                gccollisionphysicsgroup::turnonnextarea(var1, scslosifoundation::stringtoidentifier("tura"));
                gccollisionphysicsgroup::setportal(var1, "root/data/art/portals/gali/village_ripple/g_prtl", 1);
                this.portalactive = 1;
            }
        }
        else if (param1.eventid == 44) {
            if (this.callev_safe_time_event_once) {
                if (globalclass.player.getamounttokens() >= 8) {
                    debug::print("********************* YOU HAVE ENOUGH COINS");
                    if (globalclass.player.maskcontrol.isselectable(1)) {
                        debug::print("************************ YOU HAVE THE MASK OF WATER");
                        if (globalclass.player.maskcontrol.isselectable(9)) {
                            debug::print("************************** YOU HAVE THE MASK OF TRANSLATION");
                            if (globalclass.player.haselement()) {
                                debug::print("************************ YOU HAVE GALI'S ELEMENTAL POWER");
                                this.testbossdoorproximity = 1;
                            }
                        }
                    }
                }
                var2 = 0;
                while (1 >= var2) {
                    this.movedoorsdown(var2);
                    var2 = var2 + 1;
                }
                this.callev_safe_time_event_once = 0;
            }
        }
        else if (param1.eventid == 46) {
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 27) {
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.unkill();
        }
        return null;
    }
    
    method input(param1) {
        if (param1.button == 90) {
            if (param1.event == 2) {
                this.cheat(0);
            }
        }
        if (param1.button == 88) {
            if (param1.event == 2) {
                this.cheat(1);
            }
        }
        if (param1.button == 67) {
            if (param1.event == 2) {
                this.cheat(2);
            }
        }
        return null;
    }
    
    method movedoorsdown(param1) {
        var var1;
        var var2;
        var var3;
        var1 = param1;
        if (var1 == 0) {
            if (this.doorsclosed[var1]) {
                debug::print(("*****DOOR " + __tostring(var1)) + " GOES DOWN");
                var2 = this.doors[var1].getx();
                var3 = this.doors[var1].getz();
                this.doors[var1].interpolate(var2, 21.0, var3, 1.0);
            }
            else {
                debug::print(("*****DOOR " + __tostring(var1)) + " GOES UP");
                var2 = this.doors[var1].getx();
                var3 = this.doors[var1].getz();
                this.doors[var1].interpolate(var2, 37.0, var3, 1.0);
            }
        }
        else if (var1 == 1) {
            if (this.doorsclosed[var1]) {
                
            }
            else {
                this.doors[1].fadeout(2.0);
            }
        }
        return null;
    }
    
    method cheat(param1) {
        var var1;
        var1 = param1;
        if (var1 == 0) {
            if (this.doorsclosed[0]) {
                this.doorsclosed[0] = 0;
                this.movedoorsdown(var1);
            }
            else {
                this.doorsclosed[0] = 1;
                this.movedoorsdown(var1);
            }
        }
        else if (var1 == 1) {
            if (this.doorsclosed[1]) {
                this.doorsclosed[1] = 0;
                this.movedoorsdown(var1);
            }
            else {
                this.doorsclosed[1] = 1;
                this.movedoorsdown(var1);
            }
        }
        else if (var1 == 2) {
            globalclass.player.addtoken(1);
        }
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
}