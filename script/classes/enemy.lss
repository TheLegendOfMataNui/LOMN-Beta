class enemy {
    property instarray;
    property killheight;
    property particletimer;
    property timeractive;
    property charx;
    property chary;
    property charz;
    property infmask;

    method enemy() {
	    return null;
    }

    method initfull() {
        this.instarray = [  ];
        this.particletimer = 0.0;
        this.timeractive = 0;
        return null;
    }

    method cleanupfull() {
        if (this.instarray != null) {
            this.instarray = null;
        }               
        if (this.infmask != null) {
            this.infmask = null;
        }        
        return null;
    }

    method process(param1) {
        //Timer for Infected Mask & Particle Fountain
        if (this.timeractive == 1) {
            this.chary = this.chary + 0.05;
            this.particletimer = this.particletimer + param1.deltatime;
            gcareadirector::createemitter(24, this.charx, this.chary, this.charz);
            this.infmask.setpos(this.charx, (this.chary + 1.5), this.charz);
            if (this.particletimer >= 1) {
                this.infmask.hide();
                this.infmask.remove();
                this.infmask.cleanupfull();
                this.particletimer = 0.0;
                this.timeractive = 0;
            }
        }
        return null;
    }

    method input(param1) {
        return null;
    }

    method onevent(param1) {
        var instance = 0;
        //Character Array Reset
        //EventID 20 = Clear Area Event
        //Clears the array on exiting the area
        if (param1.eventid == 20) {
            this.instarray = [  ];
            this.killheight = null;
            debug::print("Cleared Enemy Array!");
        }

        //Knockback Processing
        //EventID 40 = Player Damage Event
        //MAY CAUSE ISSUES DUE TO OTHER FUNCTIONS ALSO TRIPPING THIS EVENT
        else if (param1.eventid == 40) {
            if (param1.args[1] != null) {
                var toa = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("cnt1"));
                var char = gcmodeldirector::getcharacter(param1.args[1]);

                //TO DO

                debug::print(scslosifoundation::identifiertostring(param1.args[1]) + " damaged player!");
            }
        }

        //Character Hazard Check
        //EventID 44 = Collision Physics Process Event
        else if (param1.eventid == 44) {
            if ((this.instarray != null) && (this.killheight != null)) {
                while ((this.instarray.__length - 1) >= instance) {
                    if (gccharacter::getpositiony(this.instarray[instance]) != null) {
                        if (gccharacter::getpositiony(this.instarray[instance]) < this.killheight) {                        
                            gccharacter::aidie(this.instarray[instance]);
                            this.instarray.__removeat(instance);
                            debug::print("Rahi is out of bounds! Removing...");
                        }
                        instance = instance + 1;
                    }
                }
            }
        }

        //Character Spawned Check
        //EventID 100 = GcModelDirector::AddCharacter. Passes CharID, ([1]) InstanceID, ([2]) and AreaID. ([3])       
        else if (param1.eventid == 100) {             
            this.instarray.__append(gcmodeldirector::getcharacter(param1.args[2]));
            debug::print("Spawned " + (scslosifoundation::identifiertostring(param1.args[2])));
        }

        //Character Cured Check
        //EventID 101 = GcCharacter::Kill. Passes CharID, ([1]) InstanceID, ([2]) and AreaID. ([3])
        //GcCharacter::Kill as called by LOMNHook currently redirects to GcCharacter::AiSetBenign
        else if (param1.eventid == 101) {    
            this.charx = gccharacter::getpositionx(gcmodeldirector::getcharacter(param1.args[2]));
            this.chary = gccharacter::getpositiony(gcmodeldirector::getcharacter(param1.args[2]));
            this.charz = gccharacter::getpositionz(gcmodeldirector::getcharacter(param1.args[2]));
            this.timeractive = 1;
            this.infmask = new ss_bigsprite("Root/Data/Art/INF_TAHU0000", this.charx, this.chary, this.charz, 2, 2);
            this.infmask.initfull();
            this.infmask.add();
            this.infmask.show();
            this.infmask.setcamstate(1);
            gccharacter::aiidle(gcmodeldirector::getcharacter(param1.args[2]));
            debug::print((scslosifoundation::identifiertostring(param1.args[2])) + " is now idle!");
        }
        return null;
    }
}