class enemy {
    property landarray;
    property waterarray;
    property killheight;
    property waterlevel;
    property charx;
    property chary;
    property charz;
    property infmask;

    method enemy() {
	    return null;
    }

    method initfull() {
        this.infmask = [  ];
        this.landarray = [  ];
        this.waterarray = [  ];
        return null;
    }

    method cleanupfull() {
        var instance = 0;
        if (this.infmask != null) {
            while ((this.infmask.__length - 1) >= instance) {
                if (this.infmask[instance] != null) {
                    this.infmask[instance].cleanupfull();
                    this.infmask[instance] = null;
                }
                instance = instance + 1;
            }
            this.infmask = null;
        }   
        if (this.landarray != null) {
            this.landarray = null;
        }            
        if (this.waterarray != null) {
            this.waterarray = null;
        }
        if (this.waterlevel != null) {
            this.waterlevel = null;
        }        
        if (this.killheight != null) {
            this.killheight = null;
        }
        if (this.charx != null) {
            this.charx = null;
        }
        if (this.chary != null) {
            this.chary = null;
        }
        if (this.charz != null) {
            this.charz = null;
        }
        return null;
    }

    method process(param1) {
        //Process Infected Mask instances
        var instance = 0;
        while ((this.infmask.__length - 1) >= instance) {
            this.infmask[instance].process(param1);
            instance = instance + 1;
        }
        return null;
    }

    method input(param1) {
        return null;
    }

    method onevent(param1) {
        var instance = 0;
        //Clear Area Cleanup
        //EventID 20 = Clear Area Event
        //Cleans up all code on exiting an area and resets the arrays back to default
        if (param1.eventid == 20) {
            this.cleanupfull();
            this.initfull();
            debug::print("Cleaned up and reset enemy code!");
        }

        //Knockback Processing
        //EventID 40 = Player Damage Event
        //MAY CAUSE ISSUES DUE TO OTHER FUNCTIONS ALSO TRIPPING THIS EVENT
        else if (param1.eventid == 40) {
            if (param1.args[1] != null) {
                var toa = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("cnt1"));
                var char = gcmodeldirector::getcharacter(param1.args[1]);

                //TO DO

                debug::print(scslosifoundation::identifiertostring(param1.args[1]) + " damaged player!");
            }
        }

        //Character Hazard Check
        //EventID 44 = Collision Physics Process Event
        else if (param1.eventid == 44) {
            //Land Character Handler
            if (this.landarray != null) {
                while ((this.landarray.__length - 1) >= instance) {
                    //Out of Bounds Check
                    if (this.killheight != null) {
                        if (gccharacter::getpositiony(this.landarray[instance]) < this.killheight) {
                            gccharacter::setshadowtype(this.landarray[instance], 0);
                            gccharacter::aidie(this.landarray[instance]);
                            this.landarray.__removeat(instance);
                            debug::print("Rahi is out of bounds! Removing...");
                        }
                    }
                    //Underwater Check
                    if (this.waterlevel != null) {
                        if (gccharacter::getpositiony(this.landarray[instance]) < this.waterlevel) {
                            gccharacter::setvelocity(this.landarray[instance], 0, 10, 0);
                        }
                        else {
                            gccharacter::setvelocity(this.landarray[instance], 0, 0, 0);
                        }
                    }
                    instance = instance + 1;
                }
            }
            //Fish Handler
            if (this.waterarray != null) {
                while ((this.waterarray.__length - 1) >= instance) {
                    //Out of Bounds Check
                    if (this.killheight != null) {
                        if (gccharacter::getpositiony(this.waterarray[instance]) < this.killheight) {         
                            gccharacter::setshadowtype(this.waterarray[instance], 0);
                            gccharacter::aidie(this.waterarray[instance]);
                            this.waterarray.__removeat(instance);
                            debug::print("Rahi is out of bounds! Removing...");
                        }
                    }
                    //Underwater Check
                    if (this.waterlevel != null) {
                        if (gccharacter::getpositiony(this.waterarray[instance]) > this.waterlevel) {
                            gccharacter::setvelocity(this.waterarray[instance], 0, -10, 0);
                        }
                        else {
                            gccharacter::setvelocity(this.waterarray[instance], 0, 0, 0);
                        }
                    }
                    instance = instance + 1;
                }
            }
        }

        //Character Spawned Check
        //EventID 100 = GcModelDirector::AddCharacter. Passes CharID, ([1]) InstanceID, ([2]) and AreaID. ([3])       
        else if (param1.eventid == 100) {
            gccharacter::setshadowtype(gcmodeldirector::getcharacter(param1.args[2]), 2);
            if ((param1.args[1] ==  scslosifoundation::stringtoidentifier("pira")) || (param1.args[1] ==  scslosifoundation::stringtoidentifier("shrk")) || (param1.args[1] ==  scslosifoundation::stringtoidentifier("sfsh")) || (param1.args[1] ==  scslosifoundation::stringtoidentifier("tfsh"))) {
                this.waterarray.__append(gcmodeldirector::getcharacter(param1.args[2]));
                debug::print("Spawned " + (scslosifoundation::identifiertostring(param1.args[2]) + " and added to fish handler!"));
            }
            else {
                this.landarray.__append(gcmodeldirector::getcharacter(param1.args[2]));
                debug::print("Spawned " + (scslosifoundation::identifiertostring(param1.args[2])));
            }
        }

        //Character Cured Check
        //EventID 101 = GcCharacter::Kill. Passes CharID, ([1]) InstanceID, ([2]) and AreaID. ([3])
        //GcCharacter::Kill as called by LOMNHook currently redirects to GcCharacter::AiSetBenign
        else if (param1.eventid == 101) {    
            this.charx = gccharacter::getpositionx(gcmodeldirector::getcharacter(param1.args[2]));
            this.chary = gccharacter::getpositiony(gcmodeldirector::getcharacter(param1.args[2]));
            this.charz = gccharacter::getpositionz(gcmodeldirector::getcharacter(param1.args[2]));
            this.infmask.__append(new infmask(this.charx, this.chary, this.charz));
            gccharacter::aiidle(gcmodeldirector::getcharacter(param1.args[2]));
            debug::print((scslosifoundation::identifiertostring(param1.args[2])) + " is now idle!");
        }
        return null;
    }
}