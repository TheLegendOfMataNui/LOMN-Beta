class player {
    property life;
    property maxlife;
    property energy;
    property maxenergy;
    property tokens;
    property ammo;
    property actor;
    property actorid;
    property draintimer;
    property grapplinghooksetup;
    property spritedamageamount;
    property maskcontrol;
    property elementcontrol;
    property gotglyph;
    property glyphpowerdrain;
    property bshootdragger;
    property enterstartid;
    property enterlookid;
    property equiptype;
    property air;
    property maxair;
    property splooshplayed;
    property submerged;
    property maskon;
    property drowningonland;
    property underwater;
    property airshown;
    property healthlow;
    property equippedcombat;
    property equippedpeace;
    property equippedsurf;
    property equippedjoke;
    property hittrigger;
    property crashbandicootwarped;
    property warpsound;
    property toadied;
    property spiraleffect;
    property draggercontroller;
    
    method player() {
        return null;
    }
    
    method initfull() {
        this.life = 60;
        this.maxlife = 60;
        this.energy = 60;
        this.maxenergy = 60;
        this.air = 60;
        this.maxair = 60;
        this.tokens = 0;
        this.actor = null;
        this.actorid = null;
        this.draintimer = 0.0;
        this.grapplinghooksetup = 0;
        this.spritedamageamount = 5;
        this.gotglyph = 0;
        this.maskcontrol = new lego_maskcontroller();
        this.maskcontrol.initfull();
        this.gotglyph = 0;
        this.glyphpowerdrain = 20;
        this.bshootdragger = 1;
        this.equiptype = 0;
        this.splooshplayed = 0;
        this.submerged = 0;
        this.maskon = 0;
        this.drowningonland = 0;
        this.underwater = 0;
        this.airshown = 0;
        this.healthlow = 0;
        this.equippedcombat = 0;
        this.equippedpeace = 0;
        this.equippedsurf = 0;
        this.equippedjoke = 0;
        this.hittrigger = 0;
        this.crashbandicootwarped = 0;      
        this.toadied = 0;
        this.draggercontroller = new lego_draggercontroller();        
        this.draggercontroller.initfull();
        return null;
    }
    
    method initshort() {
        this.life = this.maxlife;
        this.energy = this.maxenergy;
        this.air = this.maxair;
        this.tokens = 0;
        this.draintimer = 0.0;
        this.grapplinghooksetup = 0;
        this.maskcontrol.initshort();
        return null;
    }
    
    method cleanupshort() {
        if (this.actor != null) {
            this.actor.cleanupfull();
            this.actor = null;
        }
        this.maskcontrol.cleanupshort();
        return null;
    }
    
    method cleanupfull() {
        this.life = null;
        this.maxlife = null;
        this.energy = null;
        this.maxenergy = null;
        this.air = null;
        this.maxair = null;
        this.tokens = null;
        if (this.actor != null) {
            this.actor.cleanupfull();
            this.actor = null;
        }
        this.actorid = null;
        this.draintimer = null;
        this.grapplinghooksetup = null;
        this.spritedamageamount = null;
        if (this.maskcontrol != null) {
            this.maskcontrol.cleanupfull();
            this.maskcontrol = null;
        }
        if (this.draggercontroller != null) {
            this.draggercontroller.cleanupfull();
            this.draggercontroller = null;
        }
        this.hittrigger = null;
        this.crashbandicootwarped = null;                        
        this.toadied = null;
        return null;
    }
    
    method input(param1) {
        if (param1.event == 2) {
            if (param1.button == 238) {
                this.maskcontrol.changemask(0);
            }
            else if (param1.button == 239) {
                this.maskcontrol.changemask(1);
            }
            else if (param1.button == 240) {
                this.maskcontrol.changemask(2);
            }
            else if (param1.button == 241) {
                this.maskcontrol.changemask(3);
            }
            else if (param1.button == 242) {
                this.maskcontrol.changemask(4);
            }
            else if (param1.button == 243) {
                this.maskcontrol.changemask(1011);
            }
            else if (param1.button == 244) {
                this.maskcontrol.changemask(5);
            }
            else if (param1.button == 245) {
                this.maskcontrol.changemask(8);
            }
            else if (param1.button == 246) {
                this.maskcontrol.changemask(7);
            }
            else if (param1.button == 247) {
                this.maskcontrol.changemask(9);
            }
            else if (param1.button == 248) {
                this.maskcontrol.changemask(10);
            }
            else if (param1.button == 249) {
                this.maskcontrol.changemask(11);
            }
            else if (param1.button == 250) {
                this.maskcontrol.changemask(12);
            }
            else if (param1.button == 235) {
                this.maskcontrol.nextmask(1);
            }
            else if (param1.button == 236) {
                this.maskcontrol.nextmask(0);
            }
            else if (param1.button == 237) {
                if (this.energy > 0) {
                    this.maskcontrol.toggleactive();
                }
            }
            else if (param1.button == 231) {
                if (this.grapplinghooksetup) {
                    if (this.bshootdragger) {
                        this.actor.shootdragger();
                    }
                    else {
                        debug::print("SORRY, YOU ARE IN THE TRIG BOX YOU CANNOT SHOOT YOUR DRAGGER");
                    }
                }
                this.draggercontroller.setupdragger();
            }
            else if (param1.button == 45) {
                this.tweaktoggle();
            }
        }
        if (this.whichmaskonface() == 11) {
            this.maskcontrol.input(param1);
        }
        return null;
    }
    
    method process(param1) {
        if (this.maskcontrol.isactive()) {
            this.drainpower(param1);
        }
        if ((this.submerged == 1) || (this.drowningonland == 1)) {
            this.drainair(param1);
        }
        if (this.draggercontroller.active == 1) {
            this.draggercontroller.process(param1);
        }
        return null;
    }
    
    method onevent(param1) {
        var var1;
        var var2;
        var var3;
        var toa = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("cnt1"), 0);
        if (this.actor != null) {
            this.actor.onevent(param1);
            if ((param1.eventid == 40)  && (this.toadied == 0)) {
                if (param1.args[1] != null) {
                    debug::print("ouch! by " + __tostring(param1.args[1]));
                    gcstaticsoundsptrarray::playtablesound(1098);
                }
                else {
                    debug::print("ARGS 1 = NOTHING");
                }
                if (param1.args[0] == 10) {
                    this.removelife(this.maxlife);
                }
                else {
                    this.removelife(__toint(param1.args[0]) * 10);
                }
            }
            else if (param1.eventid == 54) {
                if (param1.args[0] == 1) {                   
                    this.submerged = 1;
                    this.canshootdragger(0);
                    if (this.maskon == 0) {
                        this.showair(1);
                        this.airshown = 1;
                    }
                    if ((this.splooshplayed == 0) && (this.actorid != "gali")) {                     
                        gcstaticsoundsptrarray::playtablesound(1092);
                        this.splooshplayed = 1;
                        debug::print("SPLOOSH!");
                        this.underwater = 1;
                        this.isswimming();
                    }
                }
                else if (param1.args[0] == 0) {                    
                    this.submerged = 0;
                    this.addair(this.maxair);
                    this.canshootdragger(1);
                    if (this.maskon == 0) {
                        this.showair(0);
                        this.airshown = 0;
                    }
                    if (this.splooshplayed) {
                        this.splooshplayed = 0;    
                        this.underwater = 0;
                        this.isswimming();                       
                    }
                }
            }
            else if (param1.eventid == 44) {              
                if ((this.maskon == 1) && (this.submerged == 1)) {
                    this.addair(this.maxair);
                    //debug::print("Yes");
                }               
                else if ((this.maskon == 1) && (this.submerged == 0)) {
                    this.drowningonland = 1;
                    this.showair(1);
                    this.airshown = 1;
                    //debug::print("Nono zone");
                }                
                else if ((this.maskon == 0) && (this.submerged == 0)) {
                    this.drowningonland = 0;
                    this.addair(this.maxair);
                    this.showair(0);
                    this.airshown = 0;
                    //debug::print("Done the do");
                }
            }          
            else if (param1.eventid == 15) {
                if (param1.args[0] == scslosifoundation::stringtoidentifier("watr")) {
                    gcstaticsoundsptrarray::playtablesound(1092);
                }
            }
            else if (param1.eventid == 2) {
                var1 = param1.args[0];
                var2 = scslosifoundation::identifiertostring(var1);
                var3 = gcareadirector::getcurrentarea();
                if (scslosistringfuncs::find(var2, "pe")) {
                    
                }
                else {
                    gcnolightdirector::hide(var1, var3);
                    gcstaticsoundsptrarray::playtablesound(1055);
                    gccollisionphysicsgroup::togglepickuponoff(var1, 0);
                    this.addenergy(20);
                }
                if (scslosistringfuncs::find(var2, "ph")) {
                    
                }
                else {
                    gcnolightdirector::hide(var1, var3);
                    gcstaticsoundsptrarray::playtablesound(1060);
                    gccollisionphysicsgroup::togglepickuponoff(var1, 0);
                    this.addlife(20);
                }
                if (scslosistringfuncs::find(var2, "et")) {
                    
                }
                else {
                    gcnolightdirector::hide(var1, var3);
                    gccollisionphysicsgroup::togglepickuponoff(var1, 0);
                    this.addtoken(1);
                    gcstaticsoundsptrarray::playtablesound(1043);
                    gcsaver::pickuptoken(var1);
                }
                if (scslosistringfuncs::find(var2, "pa")) {
                    
                }
                else {
                    gcnolightdirector::hide(var1, var3);
                    gccollisionphysicsgroup::togglepickuponoff(var1, 0);
                    this.addair(this.maxair);

                    //old method for restoring air
                    //this.actor.replenishair();
                }
                if (scslosistringfuncs::find(var2, "am")) {
                    
                }
                else {
                    gcnolightdirector::hide(var1, var3);
                    gccollisionphysicsgroup::togglepickuponoff(var1, 0);
                    gcstaticsoundsptrarray::playtablesound(1033);
                }
                if (scslosistringfuncs::find(var2, "ar")) {
                    
                }
                else {
                    gcnolightdirector::hide(var1, var3);
                    gccollisionphysicsgroup::togglepickuponoff(var1, 0);
                }
            }
            else if (param1.eventid == 7) {
                if ((this.gotglyph == 1) && (param1.args[2] == scslosifoundation::stringtoidentifier("glyp"))) {
                    if (gctoa::glyphdone(globalclass.player.actor.toahandle) == 1) {
                        if (globalclass.player.energy > this.glyphpowerdrain) {
                            globalclass.player.removeenergy(this.glyphpowerdrain);
                            gctoa::startglyph(globalclass.player.actor.toahandle);
                        }
                    }
                }
            }
            //Player died evemt
            else if (param1.eventid == 46) {
                //If a mask is being used, turn it off
                if (this.maskcontrol.isactive()) {
                    this.maskcontrol.toggleactive();
                }
                //Performs a screenwipe whenever the player has died, instead of doing it on an area by area basis
                gccollisionphysicsgroup::spinmask(1.2);
                //Sets a generic camera follow upon death instead of doing it per-killbox in each area
                globalclass.level.cam.setaimode(7);
            }
            else if (param1.eventid == 20) {
                this.processequipment(1);
                //Unload the warp sound, ensure actor is not hidden, and reset trigger property
                if (this.warpsound != null) {
                    this.warpsound.cleanupfull();
                    this.warpsound = null;
                }
                globalclass.player.actor.show();
                this.hittrigger = 0;
            }  
            else if (param1.eventid == 21) {
                var areaid = (scslosifoundation::identifiertostring(gcareadirector::getcurrentarea()));
                if ((areaid == "vllg") || (areaid == "tura") || (areaid == "shrn") || (areaid == "mosh")) {
                    this.canshootdragger(0);
                }
                else {
                    this.canshootdragger(1);
                }
                if (this.equiptype == 1) {
                    this.processequipment(1);
                }
                if (this.equiptype == 2) {
                    this.processequipment(2);
                }
                if (this.equiptype == 3) {
                    this.processequipment(3);
                }
                //Reinitialize the physics entirely to stop the landing noise when jumping into a trigger
                globalclass.player.actor.initmotionsystem();
                globalclass.player.actor.disableallraycollisions();
                globalclass.player.actor.setupphysics(1.5, 0.8, 1, 0, 0);

                //This is a temporary hack as gccollisionphysicsgroup::switchareawithtransition() doesnt take str and lok points as arguments
                if (this.crashbandicootwarped == 2) {                
                    globalclass.player.actor.gotopos(scslosifoundation::stringtoidentifier("str9"), scslosifoundation::stringtoidentifier("lok9"));
                }
            }
            //Trigger plane collision event
            else if (param1.eventid == 4) {
                var trig_plane_id0 = param1.args[0] == scslosifoundation::stringtoidentifier("tp00");
                var trig_plane_id1 = param1.args[0] == scslosifoundation::stringtoidentifier("tp01");
                var trig_plane_id2 = param1.args[0] == scslosifoundation::stringtoidentifier("tp02");
                var trig_plane_id3 = param1.args[0] == scslosifoundation::stringtoidentifier("tp03");
                var trig_plane_id4 = param1.args[0] == scslosifoundation::stringtoidentifier("tp04");
                var trig_plane_id5 = param1.args[0] == scslosifoundation::stringtoidentifier("tp05");
                var trig_plane_id6 = param1.args[0] == scslosifoundation::stringtoidentifier("tp06");
                var portal = param1.args[0] == scslosifoundation::stringtoidentifier("tps9");
                //This if statement makes sure this code doesn't repeatedly run while intersecting a trigger plane
                if (this.hittrigger == 0) {
                    //Corresponding trigger has been entered, set player to idle and increment property to avoid this from firing continuously 
                    if ((trig_plane_id0) || (trig_plane_id1) || (trig_plane_id2) || (trig_plane_id3) || (trig_plane_id4) || (trig_plane_id5) || (trig_plane_id6)) {
                        debug::print("************* ENTERED TRIGGER PLANE, SETTING TO IDLE");
                        //Check if the player jumped or swam through the trigger, and if not, set idle state as normal
                        if ((globalclass.player.actor.isjumping() == 0) && (this.submerged == 0)) {
                            debug::print("^^^^^^^^^^^^^ DIDN'T JUMP OR SWIM THROUGH TRIGGER PLANE, SETTING PLAYER TO IDLE");
                            globalclass.player.actor.idle();
                            globalclass.level.cam.setaimode(0);
                        }
                        else if ((globalclass.player.actor.isjumping() == 1) || (this.submerged == 1)) {
                            debug::print("^^^^^^^^^^^^^ JUMPED OR SWAM THROUGH TRIGGER PLANE, NOT SETTING PLAYER TO IDLE");
                            globalclass.level.cam.setaimode(7);                            
                        }
                        this.hittrigger = 1;
                    }
                    //Unique handling for portals, check trigger plane id and whether gcsaver::portalactive() returns true before proceeding
                    if ((portal) && (gcsaver::portalactive() == 1) && (this.crashbandicootwarped == 0)) {
                        debug::print("************* ENTERED PORTAL, DO THE DEW");
                        //Check if the player jumped through the portal, and if not, set idle state as normal
                        if (globalclass.player.actor.isjumping() == 0) {
                            debug::print("$$$$$$$$$$ DIDN'T JUMP THROUGH PORTAL, SETTING PLAYER TO IDLE");
                            globalclass.player.actor.idle();
                        }
                        else {
                            debug::print("^^^^^^^^^^^^^ JUMPED THROUGH PORTAL, NOT SETTING PLAYER TO IDLE");
                        }
                        //Init then play the warp sound, create the particle effect, hide the hud, disable player input/physics, begin actor fadeout, set camera mode, and increment trigger properties
                        this.warpsound = new tablecopysound(1094);
                        this.warpsound.setvolume(100);
                        this.warpsound.play(0);
                        this.spiraleffect = gcareadirector::createemitter(19, gccharacter::getpositionx(toa), gccharacter::getpositiony(toa), gccharacter::getpositionz(toa));
                        globalclass.hud.hide();
                        globalclass.player.actor.physicson(0);
                        globalclass.level.cam.setaimode(0);
                        globalclass.player.actor.fadeout(1.5);
                        this.hittrigger = 1;
                        this.crashbandicootwarped = 1;                        
                        debug::print("WOAH!");
                    }
                }
            }        
            //Screen black event
            else if (param1.eventid == 27) {
                //TODO: generic unkill, camera, start position, and possibly trigger box reset code
            }
            //Character and object fade event
            else if (param1.eventid == 35) {
                debug::print("GETTING FADE EVENT FOR: " + __tostring(scslosifoundation::identifiertostring(param1.args[0])));
                //Once player fadeout ends, hide them to complete it properly, then check the area and perform appropriate warp
                if ((param1.args[0] == scslosifoundation::stringtoidentifier("cnt1")) && (this.crashbandicootwarped == 1)) {
                    globalclass.player.actor.hide();
                    if (this.crashbandicootwarped == 1) {
                        //Check whether the portal was in tura or shrn, and increment property for the last time before area transition
                        if ((gcareadirector::getcurrentarea() == scslosifoundation::stringtoidentifier("tura"))) {
                            //Area is tura, warp to shrn
                            debug::print("switching area shrn");
                            gccollisionphysicsgroup::switchareawithtransition(scslosifoundation::stringtoidentifier("shrn"));
                        }
                        if ((gcareadirector::getcurrentarea() == scslosifoundation::stringtoidentifier("shrn"))) {
                            //Area is shrn, warp to tura
                            debug::print("switching area to tura");
                            gccollisionphysicsgroup::switchareawithtransition(scslosifoundation::stringtoidentifier("tura"));
                        }
                        //Releasing the emitter properly, first arg is unused so we just use null for the value
                        gcareadirector::releaseemitter(null, this.spiraleffect);
                        this.spiraleffect = null;
                        this.crashbandicootwarped = 2;
                    }
                }
            }
            //Transition in event
            else if (param1.eventid == 29) {
                debug::print("This seems to only fire with switchareawithtransition?");
                //Probably don't need to use this event, but this code checks the areas and whether the warped property returns the necessary value and if so, set it back to default
                if ((gcareadirector::getcurrentarea() == scslosifoundation::stringtoidentifier("tura")) || (gcareadirector::getcurrentarea() == scslosifoundation::stringtoidentifier("shrn")) && (this.crashbandicootwarped == 2)) {
                    this.crashbandicootwarped = 0;
                }   
            }
        }
        return null;
    }
    
    method setactor(cnt1, char_id, orientation, x_pos, y_pos, z_pos, unused) {
        var var1;
        this.actorid = char_id;
        this.life = 60;
        this.maxlife = 60;
        this.energy = 60;
        this.maxenergy = 60;
        if (this.actorid == "onua") {
            this.actor = new onuaclass(char_id, orientation, x_pos, y_pos, z_pos);
        }
        else if (this.actorid == "gali") {
            this.actor = new galiclass(char_id, orientation, x_pos, y_pos, z_pos);
            this.addmaxlife(20);
            this.addmaxenergy(20);
        }
        else if (this.actorid == "poha") {
            this.actor = new pohatuclass(char_id, orientation, x_pos, y_pos, z_pos);
            var1 = 0;
            while (1 >= var1) {
                this.addmaxlife(20);
                this.addmaxenergy(20);
                var1 = var1 + 1;
            }
        }
        else if (this.actorid == "kopa") {
            this.actor = new kopakaclass(char_id, orientation, x_pos, y_pos, z_pos);
            var1 = 0;
            while (2 >= var1) {
                this.addmaxlife(20);
                this.addmaxenergy(20);
                var1 = var1 + 1;
            }
        }
        else if (this.actorid == "lewa") {
            this.actor = new lewaclass(char_id, orientation, x_pos, y_pos, z_pos);
            var1 = 0;
            while (3 >= var1) {
                this.addmaxlife(20);
                this.addmaxenergy(20);
                var1 = var1 + 1;
            }
        }
        else if (this.actorid == "tahu") {
            this.actor = new tahuclass(char_id, orientation, x_pos, y_pos, z_pos);
            var1 = 0;
            while (4 >= var1) {
                this.addmaxlife(20);
                this.addmaxenergy(20);
                var1 = var1 + 1;
            }
        }
        else if (this.actorid == "akam") {
            this.actor = new akamaiclass(char_id, orientation, x_pos, y_pos, z_pos);
            var1 = 0;
            while (5 >= var1) {
                this.addmaxlife(20);
                this.addmaxenergy(20);
                var1 = var1 + 1;
			}
        }
        else if (this.actorid == "wair") {
            this.actor = new wairuhaclass(char_id, orientation, x_pos, y_pos, z_pos);
            var1 = 0;
            while (5 >= var1) {
                this.addmaxlife(20);
                this.addmaxenergy(20);
                var1 = var1 + 1;
			}
        }
        else if (this.actorid == "nbua") {
            this.actor = new nobuaclass(char_id, orientation, x_pos, y_pos, z_pos);
                while (this.energy > 0) {
                    this.removemaxenergy(20);
                    this.removeenergy(20);
                }
        }
        else if (this.actorid == "viki") {
            this.actor = new tahuclass(char_id, orientation, x_pos, y_pos, z_pos);
            var1 = 0;
            while (7 >= var1) {
                this.addmaxlife(20);
                this.addmaxenergy(20);
                var1 = var1 + 1;
            }
        }
        else if (this.actorid == "when") {
            this.actor = new whenuaclass(char_id, orientation, x_pos, y_pos, z_pos);
        }
        globalclass.hud.tokens.setcolor();
        globalclass.hud.ammo.setcolor();
        return null;
    }
    
    method actorinitfull() {
        var var1;
        if (this.actor != null) {
            this.actor.initfull();
            this.actor.setcodelife(this.life);
            this.actor.show();
            this.actor.settweakable();
            this.actor.initmotionsystem();
            this.actor.disableallraycollisions();
            this.actor.setupphysics(1.5, 0.8, 1, 0, 0);
            this.isswimming();
        }
        return null;
    }
    
    method initfromsaver() {
        this.life = 0;
        this.maxlife = 0;
        this.addmaxlife(gcsaver::gethealth());
        this.energy = 0;
        this.maxenergy = 0;
        this.addmaxenergy(gcsaver::getenergy());
        this.maskcontrol.changemask(gcsaver::getmask());
        return null;
    }
    
    method savetosaver() {
        gcsaver::sethealth(this.maxlife);
        gcsaver::setenergy(this.maxenergy);
        gcsaver::setmask(this.whichmaskonface());
        return null;
    }
    
    method removeactor() {
        this.actor.hide();
        this.actor.cleanupfull();
        this.maskcontrol.cleanupfull();
        this.actor = null;
        this.actorid = null;
        return null;
    }
    
    method changetoa(char_id) {
        globalclass.hud.cleanupfull();
        globalclass.hud.initfull();
        this.removeactor();
        this.setactor("cnt1", char_id, 0.0, 0.0, 0.0, 0.0, "ninp");
        this.actorinitfull();
        this.maskcontrol.initfull();
        if (char_id == "onua") {
            this.addmask("fake", 0);           
            this.addmask("fake", 8);
            this.addmask("fake", 7);
        }
        else if (char_id == "gali") {
            this.addmask("fake", 0);
            this.addmask("fake", 1);
            this.addmask("fake", 8);
            this.addmask("fake", 7);
            this.addmask("fake", 9);
        }
        else if (char_id == "poha") {
            this.addmask("fake", 0);
            this.addmask("fake", 1);
            this.addmask("fake", 2);
            this.addmask("fake", 8);
            this.addmask("fake", 7);
            this.addmask("fake", 9);
            this.addmask("fake", 10);
        }
        else if (char_id == "kopa") {
            this.addmask("fake", 0);
            this.addmask("fake", 1);
            this.addmask("fake", 2);
            this.addmask("fake", 3);
            this.addmask("fake", 8);
            this.addmask("fake", 7);
            this.addmask("fake", 9);
            this.addmask("fake", 10);
            this.addmask("fake", 11);
        }
        else if (char_id == "lewa") {
            this.addmask("fake", 0);
            this.addmask("fake", 1);
            this.addmask("fake", 2);
            this.addmask("fake", 3);
            this.addmask("fake", 4);
            this.addmask("fake", 8);
            this.addmask("fake", 7);
            this.addmask("fake", 9);
            this.addmask("fake", 10);
            this.addmask("fake", 11);
            this.addmask("fake", 12);
        }
        else if (char_id == "tahu") {
            this.addmask("fake", 0);
            this.addmask("fake", 1);
            this.addmask("fake", 2);
            this.addmask("fake", 3);
            this.addmask("fake", 4);
            this.addmask("fake", 1011);
            this.addmask("fake", 5);
            this.addmask("fake", 8);
            this.addmask("fake", 7);
            this.addmask("fake", 9);
            this.addmask("fake", 10);
            this.addmask("fake", 11);
            this.addmask("fake", 12);
        }
        else if (char_id == "nbua") {
            this.addmask("fake", 1011);
        }
        else if (char_id == "akam") {
            this.addmask("fake", 13);
        }
        else if (char_id == "wair") {
            this.addmask("fake", 14);
        }		
        else if (char_id == "viki") {
            this.addmask("fake", 666);
        }
        else if (char_id == "when") {
            this.addmask("fake", 8);
        }
        globalclass.player.actor.gotopos(this.enterstartid, this.enterlookid);
        return null;
    }
    
    method tweaktoggle() {
        globalclass.tweak.toggleon();
        return null;
    }
    
    method drainpower(param1) {
        this.draintimer = this.draintimer + param1.deltatime;
        if (this.energy <= 0) {
            if (this.maskcontrol.isactive() == 1) {
                this.maskcontrol.toggleactive();
            }
        }
        else if (this.draintimer >= 1.0) {
            this.draintimer = 0.0;
            if (this.maskcontrol.isactive() == 1) {
                this.removeenergy(this.maskcontrol.getdrainrate());
            }
        }
        return null;
    }
    
    method drainair(param1) {
        this.draintimer = this.draintimer + param1.deltatime;
        if (this.draintimer >= 1.0) {
            this.draintimer = 0.0;
            if (this.air >= 0) {
                this.removeair(5);
            }
            if (this.air == 0) {
                this.actor.react(5, 2);
            }
            if ((this.air == 35) || (this.air == 15)){
                gcstaticsoundsptrarray::playtablesound(1090);
            }
        }
        return null;
    }
    method addmask(param1, param2) {
        if (((this.maskcontrol.masks.__length - 1) < 0) || (this.maskcontrol.resetflag == 1)) {
            this.maskcontrol.addallmasks();
            this.maskcontrol.setselectable(param2);
            this.maskcontrol.changemask(param2);
        }
        else {
            this.maskcontrol.setselectable(param2);
        }
        return null;
    }
    
    method usemasks(param1) {
        this.maskcontrol.usemasks(param1);
        globalclass.hud.showmask(param1);
        return null;
    }
    
    method setdrainrateofmask(param1, param2) {
        this.maskcontrol.setdrainrateofmask(param1, param2);
        return null;
    }
    
    method addelement(param1, param2) {
        this.gotglyph = 1;
        gctoa::findglyph(this.actor.toahandle);
        return null;
    }
    
    method haselement() {
        return this.gotglyph;
    }
    
    method whichmaskonface() {
        return this.maskcontrol.getmask();
    }
    
    method whichelementchosen() {
        return null;
    }
    
    method ismaskpoweron() {
        return this.maskcontrol.isactive();
    }
    
    method iselementpoweron() {
        return null;
    }
    
    method kill() {
        var var1;
        if (this.toadied == 0) {
            this.toadied = 1;
            this.actor.toamustdie();
            gcstaticsoundsptrarray::playtablesound(1099);
            var1 = new scriptevent(46);
            var1.send();
            globalclass.hud.hide();
            this.removeequipment();
        }
        return null;
    }
    
    method unkill() {
        this.actor.toaisalive();
        gcstaticsoundsptrarray::playtablesound(1100);
        this.addlife(this.maxlife);
        this.addenergy(this.maxenergy);
        this.addair(this.maxair);
        this.underwater = 0;
        this.isswimming();
        if (this.equiptype == 1) {
            this.processequipment(1);
        }
        if (this.equiptype == 2) {
            this.processequipment(2);
        }
        if (this.equiptype == 3) {
            this.processequipment(3);
        }
        if (this.equiptype == 4) {
            this.processequipment(4);
        }
        this.actor.setanimationscalar(1);
        this.toadied = 0;
        return null;
    }
    
    method addlife(param1) {
        this.life = this.life + param1;
        if (this.life > this.maxlife) {
            this.life = this.maxlife;
        }
        globalclass.hud.thingy.setlife(this.life);
        if (this.actor != null) {
            if (this.actor.toahandle != null) {
                this.actor.setcodelife(this.life);
            }
        }
        return null;
    }
    
    method removelife(param1) {
        if (param1 == null) {
            param1 = 0;
        }
        this.life = this.life - param1;
        if (this.life <= 0) {
            this.life = 0;
            globalclass.hud.thingy.setlife(0);
            this.kill();
        }
        else {
            globalclass.hud.thingy.setlife(this.life);
        }
        if (this.actor != null) {
            if (this.actor.toahandle != null) {
                this.actor.setcodelife(this.life);
            }
        }
        if ((this.life == 40) && (this.healthlow == 0)) {
            gcstaticsoundsptrarray::playtablesound(1030);
            this.healthlow = 1;
        }
        else if (this.life >= 40) {
            this.healthlow = 0;
        }
        return null;
    }
    
    method addmaxlife(param1) {
        this.maxlife = this.maxlife + param1;
        globalclass.hud.thingy.setmaxlife(this.maxlife);
        this.addlife(this.maxlife);
        return null;
    }
    
    method removemaxlife(param1) {
        this.maxlife = this.maxlife - param1;
        globalclass.hud.thingy.setmaxlife(this.maxlife);
        this.addlife(this.maxlife);
        return null;
    }
    
    method addenergy(param1) {
        this.energy = this.energy + param1;
        if (this.energy > this.maxenergy) {
            this.energy = this.maxenergy;
        }
        globalclass.hud.thingy.setenergy(this.energy);
        return null;
    }
    
    method removeenergy(param1) {
        this.energy = this.energy - param1;
        if (this.energy < 0) {
            this.energy = 0;
        }
        globalclass.hud.thingy.setenergy(this.energy);
        return null;
    }
    
    method addmaxenergy(param1) {
        this.maxenergy = this.maxenergy + param1;
        globalclass.hud.thingy.setmaxenergy(this.maxenergy);
        this.addenergy(this.maxenergy);
        return null;
    }
    
    method removemaxenergy(param1) {
        this.maxenergy = this.maxenergy - param1;
        globalclass.hud.thingy.setmaxenergy(this.maxenergy);
        this.addenergy(this.maxenergy);
        return null;
    }
    
    method getamounttokens() {
        return this.tokens;
    }
    
    method addtoken(param1) {
        this.tokens = this.tokens + param1;
        globalclass.hud.tokens.addtoken(param1);
        return null;
    }
    
    method removetoken(param1) {
        this.tokens = this.tokens - param1;
        globalclass.hud.tokens.removetoken(param1);
        return null;
    }
    
    method settokens(param1) {
        this.tokens = param1;
        globalclass.hud.tokens.settokens(param1);
        return null;
    }
    
    method setclimbable(param1) {
        if (param1 == null) {
            param1 = 1;
        }
        this.actor.setclimbable(param1);
        return null;
    }
    
    method getactorid() {
        return scslosifoundation::stringtoidentifier(this.actorid);
    }
    
    method getactorstringid() {
        return this.actorid;
    }
    
    method specalelementpowerbooltotrue() {
        var var1;
        var1 = 1;
        return null;
    }
    
    method specalelementpowerbooltofalse() {
        var var1;
        var1 = 0;
        return null;
    }
    
    method addair(param1) {
        this.air = this.air + param1;
        if (this.air > this.maxair) {
            this.air = this.maxair;
        }
        globalclass.hud.thingy.setair(this.air);
        return null;
    }
    
    method removeair(param1) {
        this.air = this.air - param1;
        if (this.air < 0) {
            this.air = 0;
        }
        globalclass.hud.thingy.setair(this.air);
        return null;
    }
        
    method addmaxair(param1) {
        this.maxair = this.maxair + param1;
        globalclass.hud.thingy.setmaxair(this.maxair);
        this.addair(this.maxair);
        return null;
    }
    
    method removemaxair(param1) {
        this.maxair = this.maxair - param1;
        globalclass.hud.thingy.setmaxair(this.maxair);
        this.addair(this.maxair);
        return null;
    }
    
    method setupgrapplinghook() {
        this.grapplinghooksetup = 1;
        debug::print("x: " + __tostring(this.actor.getposx()));
        this.actor.setupgrapplinghook(25, 30, 30);
        this.setgrapplinghookdistance(120);
        return null;
    }
    
    method setgrapplinghookdistance(param1) {
        if (this.grapplinghooksetup) {
            this.actor.setgrapplinghookdistance(param1);
        }
        return null;
    }
    
    method canshootdragger(param1) {
        if (param1 == null) {
            param1 = 1;
        }
        this.bshootdragger = param1;
        return null;
    }

    method processequipment(param1) {
        var toa;
        toa = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("cnt1"), 0);
        this.removeequipment();
        if ((param1 == 1) && (this.equippedcombat == 0)) {
            if (this.actorid == "kopa") {
                //Apply Combat Equipment
                gccharacter::addpart(toa, "cnt1/hsrd", 1);
                gccharacter::addpart(toa, "cnt1/hsld", 2); 
                this.equiptype = 1;
                this.equippedcombat = 1;
                debug::print("Equipped Kopaka For Combat");
            }
            if (this.actorid == "lewa") {
                //Apply Combat Equipment
                gccharacter::addpart(toa, "cnt1/haxe", 1);
                this.equiptype = 1;
                this.equippedcombat = 1;
                debug::print("Equipped Lewa For Combat");
            }
            if (this.actorid == "tahu") {
                //Apply Combat Equipment
                gccharacter::addpart(toa, "cnt1/hsrd", 1);
                gclight::swordlight;
                this.equiptype = 1;
                this.equippedcombat = 1;
                GcToa::SetElementSprites(6);
                GcToa::CycleEmitters(1);
                debug::print("Equipped Tahu For Combat");
            }
        }
        if ((param1 == 2) && (this.equippedpeace == 0)) {
            if (this.actorid == "kopa") {
                //Apply Peace Equipment
                gccharacter::addpart(toa, "cnt1/bsrd", 3);
                gccharacter::addpart(toa, "cnt1/bsld", 4); 
                this.equiptype = 2;
                this.equippedpeace = 1;
                debug::print("Equipped Kopaka For Peace");
            }
            if (this.actorid == "lewa") {
                //Apply Peace Equipment
                gccharacter::addpart(toa, "cnt1/baxe", 3);
                this.equiptype = 2;
                this.equippedpeace = 1;
                debug::print("Equipped Lewa For Peace");
            }            
            if (this.actorid == "tahu") {
                //Apply Peace Equipment
                gccharacter::addpart(toa, "cnt1/bsrd", 3);
                this.equiptype = 2;
                this.equippedpeace = 1;
                GcToa::SetElementSprites(6);
                GcToa::CycleEmitters(0);
                debug::print("Equipped Tahu For Peace");
            }
        }        
        if ((param1 == 3) && (this.equippedsurf == 0)) {
            //Apply Surf Equipment
            gccharacter::addpart(toa, "cnt1/hsrd", 1);
            gccharacter::addpart(toa, "cnt1/fsld", 5); 
            gccharacter::addpart(toa, "cnt1/ssld", 6);
            this.equiptype = 3;
            this.equippedsurf = 1;
            debug::print("Equipped Kopaka For Surfing");
        }            
        if ((param1 == 4) && (this.equippedjoke == 0)) {
            if (this.actorid == "poha") {
                //Apply Joke Equipment
                gccharacter::addpart(toa, "cnt1/ptto", 7);
                this.equiptype = 4;
                this.equippedpeace = 1;
                debug::print("Equipped Pohatu For Jokes");
            }
        }        
        debug::print("Equipment type = " + __tostring(this.equiptype));
        debug::print("Equipcombat = " + __tostring(this.equippedcombat));
        debug::print("Equippeace = " + __tostring(this.equippedpeace));
        debug::print("Equipsurf = " + __tostring(this.equippedsurf));
        debug::print("Equipsurf = " + __tostring(this.equippedjoke));
        return null;
    }

    method removeequipment() {
        var toa;
        toa = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("cnt1"), 0);       
        this.equippedcombat = 0;
        this.equippedpeace = 0;
        this.equippedsurf = 0;
        this.equippedjoke = 0;
        gccharacter::removepart(toa, 1);
        gccharacter::removepart(toa, 2);
        gccharacter::removepart(toa, 3);
        gccharacter::removepart(toa, 4);
        gccharacter::removepart(toa, 5);
        gccharacter::removepart(toa, 6);
        gccharacter::removepart(toa, 7);
        debug::print("Removed all equipment!");
        return null;
    }

    method isswimming() {
        if (this.underwater == 1) {
            this.actor.setunderwater(1);
            this.underwater = null;
            debug::print(__tostring(this.actorid) + (" is swimming!"));
        }
        else if (this.underwater == 0) {
            this.actor.setunderwater(0);
            this.underwater = null;
            debug::print(__tostring(this.actorid) + (" is not swimming!"));
        }
        return null;
    }

    method showair(param1) {
        if ((param1 == 1) && (this.airshown == 0)) {
            globalclass.hud.thingy.slideair(1);
            this.airshown = 1;
        }
        else if ((param1 == 0) && (this.airshown == 1)) {
            globalclass.hud.thingy.slideair(0);
            this.airshown = 0;
        }
        return null;
    }
}