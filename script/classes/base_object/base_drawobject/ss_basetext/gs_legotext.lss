class gs_legotext : ss_basetext {
    property newfont;
    
    method gs_legotext(font_name, string, x1_pos, y1_pos, z_pos, scale, horizontal_alignment, vertical_alignment, padding, is_new_font) {
        if (is_new_font == null) {
            this.newfont = 0;
        }
        else {
            this.newfont = is_new_font;
        }
        this.fontname = font_name;
        this.string = string;
        if (padding != null) {
            this.padadjustment = padding;
        }
        else {
            this.padadjustment = 0;
        }
        this.x1 = x1_pos;
        this.y1 = y1_pos + this.padadjustment;
        this.z = z_pos;
        if (scale != null) {
            this.scale = scale;
        }
        else {
            this.scale = 1;
        }
        if (horizontal_alignment != null) {
            this.horizontal = horizontal_alignment;
        }
        else {
            this.horizontal = 0;
        }
        if (vertical_alignment != null) {
            this.verticle = vertical_alignment;
        }
        else {
            this.verticle = 4;
        }
        return null;
    }
    
    method initfull() {
        if (this.newfont == 1) {
            this.font = sctilefont::create(this.fontname);
        }
        else {
            this.font = globalclass.getgamefont(this.fontname);
        }
        this.text = sctextobject::create(this.x1, this.y1, this.z, this.font, this.string);
        sctextobject::setscale(this.text, this.scale, this.scale);
        sctextobject::setjustification(this.text, this.horizontal | this.verticle);
        sctextobject::enablejustification(this.text, 1);
        return null;
    }
    
    method cleanupfull() {
        this.font = null;
        this.text = null;
        return null;
    }
    
    method initshort() {
        if (this.newfont == 1) {
            this.font = sctilefont::create(this.fontname);
        }
        else {
            this.font = globalclass.getgamefont(this.fontname);
        }
        this.text = sctextobject::create(this.x1, this.y1, this.z, this.font, this.string);
        sctextobject::setscale(this.text, this.scale, this.scale);
        sctextobject::setjustification(this.text, this.horizontal | this.verticle);
        sctextobject::enablejustification(this.text, 1);
        return null;
    }
    
    method breakup(param1) {
        var var1;
        var var2;
        var var3;
        var var4;
        if (scslosistringfuncs::length(this.string) > param1) {
            var1 = scslosistringfuncs::left(this.string, param1);
            var2 = scslosistringfuncs::findrev(var1, " ");
            var1 = scslosistringfuncs::left(this.string, var2);
            var3 = scslosistringfuncs::right(this.string, (scslosistringfuncs::length(this.string) - var2) - 1);
            if (scslosistringfuncs::length(var3) > param1) {
                this.string = var3;
                var3 = scslosistringfuncs::left(this.string, param1);
                var2 = scslosistringfuncs::findrev(var3, " ");
                var3 = scslosistringfuncs::left(this.string, var2);
                var4 = scslosistringfuncs::right(this.string, (scslosistringfuncs::length(this.string) - var2) - 1);
                var3 = (var3 + "\n") + var4;
            }
            this.string = (var1 + "\n") + var3;
            this.setstring(this.string);
        }
        return null;
    }
    
    method scalefont(scale) {
        this.scale = scale;
        sctextobject::setscale(this.text, this.scale, this.scale);
        return null;
    }
}