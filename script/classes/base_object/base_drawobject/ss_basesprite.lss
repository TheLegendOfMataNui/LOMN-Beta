class ss_basesprite : base_drawobject {
    property filename;
    property sprite;
    property handle;
    
    method ss_basesprite(file_path, left_side_pos, top_side_pos, z_coord, right_side_pos, bottom_side_pos, alpha) {
        this.filename = file_path;
        if (left_side_pos != null) {
            this.x1 = left_side_pos;
        }
        else {
            this.x1 = 0;
        }
        if (top_side_pos != null) {
            this.y1 = top_side_pos;
        }
        else {
            this.y1 = 0;
        }
        if (z_coord != null) {
            this.z = z_coord;
        }
        else {
            this.z = 0;
        }
        if (right_side_pos != null) {
            this.x2 = right_side_pos;
        }
        else {
            this.x2 = 0;
        }
        if (bottom_side_pos != null) {
            this.y2 = bottom_side_pos;
        }
        else {
            this.y2 = 0;
        }
        if (alpha != null) {
            this.transval = alpha;
        }
        else {
            this.transval = 255;
        }
        return null;
    }
    
    method initfull() {
        this.sprite = gcbigsprite::loadhudsprite(this.x1, this.y1, this.x2, this.y2, this.filename, 0);
        gcbigsprite::setzdepth(this.sprite, this.z);
        return null;
    }
    
    method initshort() {
        this.initfull();
        return null;
    }
    
    method cleanupfull() {
        if (this.handle != null) {
            gchuddirector::remove(this.handle);
        }
        this.sprite = null;
        this.handle = null;
        return null;
    }
    
    method cleanupshort() {
        this.cleanupfull();
        return null;
    }
    
    method add() {
        this.handle = gchuddirector::addbigsprite(this.sprite);
        return null;
    }
    
    method remove() {
        if (this.handle != null) {
            gchuddirector::remove(this.handle);
            this.handle = null;
        }
        return null;
    }
    
    method show() {
        gchuddirector::show(this.handle);
        this.onscreen = 1;
        return null;
    }
    
    method hide() {
        if (this.handle != null) {
            gchuddirector::hide(this.handle);
            this.onscreen = 0;
        }
        return null;
    }
    
    method setpos(param1, param2, param3, param4) {
        if (param1 != null) {
            this.x1 = param1;
        }
        if (param3 != null) {
            this.x2 = param3;
        }
        if (param2 != null) {
            this.y1 = param2;
        }
        if (param4 != null) {
            this.y2 = param4;
        }
        gcbigsprite::sethudposition(this.sprite, this.x1, this.y1, this.x2, this.y2);
        gcbigsprite::setzdepth(this.sprite, this.z);
        return null;
    }
    
    method changepos(param1, param2) {
        if (param1 != null) {
            this.x1 = this.x1 + param1;
            this.x2 = this.x2 + param1;
        }
        if (param2 != null) {
            this.y1 = this.y1 + param2;
            this.y2 = this.y2 + param2;
        }
        gcbigsprite::sethudposition(this.sprite, this.x1, this.y1, this.x2, this.y2);
        return null;
    }
    
    method setzvalue(param1) {
        if (param1 != null) {
            this.z = param1;
        }
        gcbigsprite::setzdepth(this.sprite, this.z);
        return null;
    }
    
    method enabletransparency(param1) {
        var var1;
        if (param1 != null) {
            var1 = param1;
        }
        else {
            var1 = 1;
        }
        gcbigsprite::enabletransparency(this.sprite, param1);
        return null;
    }
    
    method settransparency(param1) {
        this.transval = param1;
        gcbigsprite::settransparency(this.sprite, this.transval);
        return null;
    }
    
    method enablealphachannel(bool) {
        //default is true
        var var1;
        if (bool != null) {
            var1 = bool;
        }
        else {
            var1 = 1;
        }
        gcbigsprite::enablealphachannel(this.sprite, bool);
        return null;
    }
    
    method setcolor(red, green, blue, alpha) {
        gcbigsprite::setcolor(this.sprite, red, green, blue, alpha);
        return null;
    }
}