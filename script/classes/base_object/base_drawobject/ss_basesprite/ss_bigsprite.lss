class ss_bigsprite : ss_basesprite {
    property camstate;
    
    method ss_bigsprite(file_path, x_pos, y_pos, z_pos, width, height, cam_state) {
        this.filename = file_path;
        if (x_pos != null) {
            this.x1 = x_pos;
        }
        else {
            this.x1 = 0;
        }
        if (y_pos != null) {
            this.y1 = y_pos;
        }
        else {
            this.y1 = 0;
        }
        if (z_pos != null) {
            this.z = z_pos;
        }
        else {
            this.z = 0;
        }
        if (width != null) {
            this.w = width;
        }
        else {
            this.w = 0;
        }
        if (height != null) {
            this.h = height;
        }
        else {
            this.h = 0;
        }
        //boolean is sprite a billboard, default is true
        if (cam_state != null) {
            this.camstate = cam_state;
        }
        else {
            this.camstate = 1;
        }
        return null;
    }
    
    method initfull() {
        this.sprite = gcbigsprite::create(this.w, this.h, this.x1, this.y1, this.z, this.filename, 0);
        gcbigsprite::facecamera(this.sprite, this.camstate);
        gcbigsprite::enablealphachannel(this.sprite, 1);
        return null;
    }
    
    method initshort() {
        this.sprite = gcbigsprite::create(this.w, this.h, this.x1, this.y1, this.z, this.filename, 0);
        gcbigsprite::facecamera(this.sprite, this.camstate);
        gcbigsprite::enablealphachannel(this.sprite, 1);
        return null;
    }
    
    method cleanupfull() {
        if (this.handle != null) {
            gceffectsdirector::remove(this.handle);
        }
        this.handle = null;
        this.sprite = null;
        return null;
    }
    
    method cleanupshort() {
        this.cleanupfull();
        return null;
    }
    
    method add() {
        this.handle = gceffectsdirector::addbigsprite(this.sprite);
        return null;
    }
    
    method show() {
        gceffectsdirector::show(this.handle);
        this.onscreen = 1;
        return null;
    }
    
    method hide() {
        if (this.handle != null) {
            gceffectsdirector::hide(this.handle);
            this.onscreen = 0;
        }
        return null;
    }
    
    method remove() {
        if (this.handle != null) {
            gceffectsdirector::remove(this.handle);
            this.handle = null;
        }
        return null;
    }
    
    method setpos(param1, param2, param3) {
        if (param1 != null) {
            this.x1 = param1;
        }
        if (param2 != null) {
            this.y1 = param2;
        }
        if (param3 != null) {
            this.z = param3;
        }
        gcbigsprite::setposition(this.sprite, this.w, this.h, this.x1, this.y1, this.z);
        return null;
    }
    
    method changepos(param1, param2, param3) {
        if (param1 != null) {
            this.x1 = this.x1 + param1;
        }
        if (param2 != null) {
            this.y1 = this.y1 + param2;
        }
        if (param3 != null) {
            this.z = this.z + param3;
        }
        gcbigsprite::setposition(this.sprite, this.w, this.h, this.x1, this.y1, this.z);
        return null;
    }
    
    method setwh(param1, param2) {
        if (param2 != null) {
            this.h = param2;
        }
        if (param1 != null) {
            this.w = param1;
        }
        gcbigsprite::setposition(this.sprite, this.w, this.h, this.x1, this.y1, this.z);
        return null;
    }
    
    method changewh(param1, param2) {
        if (param2 != null) {
            this.w = param1 + this.w;
        }
        if (param1 != null) {
            this.h = param2 + this.h;
        }
        gcbigsprite::setposition(this.sprite, this.w, this.h, this.x1, this.y1, this.z);
        return null;
    }
    
    method setcamstate(bool) {
        this.camstate = bool;
        gcbigsprite::facecamera(this.sprite, this.camstate);
        return null;
    }
}