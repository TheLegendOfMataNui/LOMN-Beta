class galiclass : gs_lego_toa {
    property walkspeed;
    property runspeed;
    property standingjumpheight;
    property standingjumplength;
    property runningjumpheight;
    property runningjumplength;
    property swimingabilty;
    property bounce;
    property mapperstate;
    property inputhandle;
    
    method galiclass(param1, param2, param3, param4, param5) {
        this.gs_lego_toa(param1, param2, param3, param4, param5);
        this.mapperhandle = gcgame::getkeymapper();
        this.walkspeed = 4;
        this.runspeed = 15;
        this.standingjumpheight = 6;
        this.standingjumplength = 6;
        this.runningjumpheight = 4;
        this.runningjumplength = 8;
        this.swimingabilty = 0;
        this.bounce = 0;
        this.mapperstate = 1;
        gckeymapper::setusecontext(this.mapperhandle, 0);
        this.inputhandle = null;
        this.open_eye_sprite_filename = "Root/data/art/hud/yelloweyeson";
        this.closed_eye_sprite_filename = "Root/data/art/hud/yelloweyesoff";
        return null;
    }
    
    method initfull() {
        this.lego_toa_initfull();
        this.inputhandle = globalclass.addtoinputlist(this);


        // Set camera positioning
        globalclass.level.cam.setcamzoomfactor(8.0); // TODO: Set a number here
        globalclass.level.cam.setheightoffset(4.0); // TODO: Also set a number here


        return null;
    }
    
    method cleanupfull() {
        this.lego_toa_cleanupfull();
        globalclass.removefrominputlist(this.inputhandle);
        this.inputhandle = null;
        return null;
    }
    
    method setcontext(param1) {
        var var1;
        var1 = param1;
        if (var1 == 0) {
            this.mapperstate = 0;
            gckeymapper::setusecontext(this.mapperhandle, 0);
            debug::print("************* SETCONTEXT MAPPERSTATE = 0");
        }
        else if (var1 == 1) {
            this.mapperstate = 1;
            gckeymapper::setusecontext(this.mapperhandle, 0);
            debug::print("************* SETCONTEXT MAPPERSTATE = 1");
        }
        return null;
    }
    
    method setupgrapplinghook(param1, param2, param3) {
        this.setdraggerreaction(0);
        this.setmydraggerreactionanimation(scslosifoundation::stringtoidentifier("g017"));
        this.restrictdraggercameramode(12);
        this.setupdraggertip("Root/data/Art/SpriteAnims/galihook", "hook", scslosifoundation::stringtoidentifier("hand"), scslosifoundation::stringtoidentifier("cnt1"), null, null, null);
        this.setupdraggermaxrange(45);
        this.setupdraggerspeeds(param2, param3);
        this.settargeteermaxrange(45);
        this.settargeteerselectionmode(1);
        this.settargeteerconeangle(param1);
        debug::print("GrapplingHook has been setUp.");
        this.ishookenabled = 1;
        return null;
    }
    
    method setgrapplinghookdistance(param1) {
        this.setupdraggermaxrange(param1);
        return null;
    }
}