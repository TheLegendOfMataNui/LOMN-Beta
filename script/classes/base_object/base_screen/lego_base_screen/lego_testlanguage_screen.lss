class lego_testlanguage_screen : lego_base_screen {
    property currentitem;
    property stringtable;
    property examplestring;
    property go_back;
    property stringid;
    
    method lego_testlanguage_screen() {
        this.go_back = 0;
        return null;
    }
    
    method initfull() {
        var var1;
        this.items = [ new gs_legotext("Root/Data/Art/Fonts/BionicleFont", "BionicleFont", screenx * 0.05, screeny * 0.05, 0, 1.25, 0, 4, 0, 1), 
            new gs_legotext("Root/Data/Art/Fonts/BionicleFontshad", "BionicleFontshad", screenx * 0.05, (screeny * 0.05) + 30, 0, 1.25, 0, 4, 0, 1), 
            new gs_legotext("Root/Data/Art/Fonts/tech_font_01", "TECH FONT", screenx * 0.05, (screeny * 0.05) + 60, 0, 1.0, 0, 4, 0, 1),
            new gs_legotext("Root/Data/Art/Fonts/tech_font_01_hilight", "TECH FONT HILIGHTED", screenx * 0.05, (screeny * 0.05) + 90, 0, 1.0, 0, 4, 0, 1),
            new gs_legotext("Root/Data/Art/Fonts/BionicleFontMat", "MATORAN", screenx * 0.05, (screeny * 0.05) + 120, 0, 1.25, 0, 4, 0, 1) ];
        var1 = 0;
        while ((this.items.__length - 1) >= var1) {
            this.items[var1].initfull();
            this.items[var1].add();
            this.items[var1].show();
            var1 = var1 + 1;
        }
        this.stringtable = new gs_lego_stringtable("Strings");
        this.examplestring = null;
        this.currentitem = 0;
        sctilefont::setcolor(this.items[this.currentitem].font, 0, 255, 0, 255);
        this.newlanguage();
        return null;
    }
    
    method cleanupfull() {
        var var1;
        if (this.items != null) {
            var1 = 0;
            while ((this.items.__length - 1) >= var1) {
                this.items[var1].remove();
                this.items[var1].cleanupfull();
                this.items[var1] = null;
                var1 = var1 + 1;
            }
            this.items = null;
        }
        this.currentitem = null;
        if (this.examplestring != null) {
            var1 = 0;
            while ((this.examplestring.__length - 1) >= var1) {
                this.examplestring[var1].remove();
                this.examplestring[var1].cleanupfull();
                this.examplestring[var1] = null;
                var1 = var1 + 1;
            }
            this.examplestring = null;
        }
        if (this.stringtable != null) {
            this.stringtable.cleanupfull();
            this.stringtable = null;
        }
        return null;
    }
    
    method process(param1) {
        if (this.go_back) {
            screenlist.backward();
            this.go_back = 0;
        }
        return null;
    }

    method input(param1) {
        if (param1.event == 2) {
            if (param1.button == 9) {
                this.setpointer(-1);
            }
            if (param1.button == 12) {
                this.setpointer(1);
            }
            if (param1.button == 38) {
                this.setpointer(-1);
            }
            if (param1.button == 40) {
                this.setpointer(1);
            }
            if (param1.button == 251) {
                this.go_back = 1;
            }
            //if (param1.button == 37) {
            //    this.newlanguage(-1);
            //}
            //if (param1.button == 39) {
            //    this.newlanguage(1);
            //}
        }
        return null;
    }
    
    method setpointer(item_increment) {
        sctilefont::setcolor(this.items[this.currentitem].font, 255, 255, 255, 255);
        this.currentitem = this.currentitem + item_increment;
        if (this.currentitem < 0) {
            this.currentitem = this.items.__length - 1;
        }
        if (this.currentitem > (this.items.__length - 1)) {
            this.currentitem = 0;
        }
        sctilefont::setcolor(this.items[this.currentitem].font, 0, 255, 0, 255);
        this.newlanguage();
        return null;
    }
    
    method newlanguage() {
        var font;
        var strings;
        var scaling;
        if (this.examplestring != null) {
            strings = 0;
            while ((this.examplestring.__length - 1) >= strings) {
                this.examplestring[strings].remove();
                this.examplestring[strings].cleanupfull();
                this.examplestring[strings] = null;
                strings = strings + 1;
            }
            this.examplestring = null;
        }
        if (this.currentitem == 0) {
            globalclass.setlanguage(0);
            font = "Root/Data/Art/Fonts/BionicleFont";
            scaling = 1.0;
        }
        else if (this.currentitem == 1) {
            globalclass.setlanguage(1);
            font = "Root/Data/Art/Fonts/BionicleFontshad";
            scaling = 1.0;
        }
        else if (this.currentitem == 2) {
            globalclass.setlanguage(2);
            font = "Root/Data/Art/Fonts/tech_font_01";
            scaling = 0.6;
        }
        else if (this.currentitem == 3) {
            globalclass.setlanguage(3);
            font = "Root/Data/Art/Fonts/tech_font_01_hilight";
            scaling = 0.6;
        }
        else if (this.currentitem == 4) {
            globalclass.setlanguage(4);
            font = "Root/Data/Art/Fonts/BionicleFontMat";
            scaling = 1.0;
        }
        this.stringtable.initfull();
        if (this.examplestring == null) {
            var x_pos = (screenx * 0.5);
            var y_pos = (screeny - 300);
            this.examplestring = [ new gs_lego_languagetext(font, 0, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 1, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 2, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 3, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 4, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 5, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 6, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 7, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 8, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 9, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 10, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 11, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 12, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 13, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 14, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 15, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 16, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0),
                new gs_lego_languagetext(font, 17, this.stringtable, x_pos, y_pos, 0, scaling, 256, 2, 0) ];
            strings = 0;
            while ((this.examplestring.__length - 1) >= strings) {
                this.examplestring[strings].initfull();
                this.examplestring[strings].add();
                this.examplestring[strings].show();
                y_pos = y_pos + 15;
                this.examplestring[strings].setpos(x_pos, y_pos, 0);
                strings = strings + 1;
            }
        }
        return null;
    }
}