class optionscreen : base_screen {
    property menustrings;
    property activeidx;
    property inputidx;
    property gammalevel;
    property languagestrings;
    property currentlanguage;
    property keyboardoptionsstrings;
    property currentkeyboardoptions;
    property need_to_call_backward;
    
    method optionscreen() {
        this.menustrings = null;
        this.activeidx = null;
        this.inputidx = null;
        this.languagestrings = null;
        this.currentlanguage = null;
        this.keyboardoptionsstrings = null;
        this.currentkeyboardoptions = null;
        this.need_to_call_backward = 0;
        return null;
    }
    
    method initfull() {
        var var1;
        this.languagestrings = [ gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 13), 
            gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 16), 
            gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 19), 
            gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 8), 
            gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 12), 
            gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 24), 
            gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 50), 
            gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 55) ];
        this.currentlanguage = gcareadirector::getlanguage();
        if (this.currentlanguage > (this.languagestrings.__length - 1)) {
            this.currentlanguage = 0;
        }
        this.keyboardoptionsstrings = [ "Mouse (Default)", 
            "Numpad Keys" ];
        this.currentkeyboardoptions = gckeymapper::getkeyoption(gcgame::getkeymapper()) - 1;
        this.gammalevel = gcgraphicsoptions::getgammacorrection();
        this.menustrings = [ new gs_legotext("Root/Data/Art/Fonts/BionicleFont", (gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 25) + ":  ") + this.languagestrings[this.currentlanguage], screenx * 0.25, screeny * 0.25, 0, 1.0, 0, 4, 0, 1), 
            new gs_legotext("Root/Data/Art/Fonts/BionicleFont", (gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 18) + ":  ") + __tostring(this.gammalevel), screenx * 0.25, (screeny * 0.25) + 40, 0, 1.0, 0, 4, 0, 1), 
            new gs_legotext("Root/Data/Art/Fonts/BionicleFont", "KeyBoard Settings: " + this.keyboardoptionsstrings[this.currentkeyboardoptions], screenx * 0.25, (screeny * 0.25) + 80, 0, 1.0, 0, 4, 0, 1), 
            new gs_legotext("Root/Data/Art/Fonts/BionicleFont", gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 3), screenx * 0.25, (screeny * 0.25) + 120, 0, 1.0, 0, 4, 0, 1) ];
        var1 = 0;
        while ((this.menustrings.__length - 1) >= var1) {
            this.menustrings[var1].initfull();
            sctilefont::setcolor(this.menustrings[var1].font, 255, 255, 255, 255);
            this.menustrings[var1].add();
            this.menustrings[var1].show();
            var1 = var1 + 1;
        }
        this.activeidx = 0;
        sctilefont::setcolor(this.menustrings[this.activeidx].font, 255, 255, 0, 255);
        return null;
    }
    
    method cleanupfull() {
        var var1;
        var var2;
        var var3;
        if (!(this.menustrings == null)) {
            var1 = 0;
            while ((this.menustrings.__length - 1) >= var1) {
                this.menustrings[var1].hide();
                this.menustrings[var1].cleanupfull();
                this.menustrings[var1] = null;
                var1 = var1 + 1;
            }
            this.menustrings = null;
        }
        this.languagestrings = null;
        this.activeidx = null;
        this.inputidx = null;
        var2 = null;
        var3 = null;
        this.need_to_call_backward = null;
        return null;
    }
    
    method updatestrings() {
        this.languagestrings[0] = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 13);
        this.languagestrings[1] = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 16);
        this.languagestrings[2] = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 19);
        this.languagestrings[3] = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 8);
        this.languagestrings[4] = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 12);
        this.languagestrings[5] = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 24);
        this.languagestrings[6] = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 50);
        this.languagestrings[7] = gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 55);
        this.menustrings[0].setstring((gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 25) + ":  ") + this.languagestrings[this.currentlanguage]);
        this.menustrings[1].setstring((gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 18) + ":  ") + __tostring(this.gammalevel));
        this.menustrings[2].setstring("KeyBoard Settings: " + this.keyboardoptionsstrings[this.currentkeyboardoptions]);
        this.menustrings[3].setstring(gcareadirector::getscriptfluffstring(scslosifoundation::stringtoidentifier("fend"), 1, 3));
        return null;
    }
    
    method process(param1) {
        if (this.need_to_call_backward) {
            screenlist.backward();
        }
        return null;
    }
    
    method input(param1) {
        if (param1.event == 2) {
            if (param1.button == 38) {
                gcstaticsoundsptrarray::playtablesound(1072);
                sctilefont::setcolor(this.menustrings[this.activeidx].font, 255, 255, 255, 255);
                this.activeidx = this.activeidx - 1;
                if (this.activeidx < 0) {
                    this.activeidx = this.menustrings.__length - 1;
                }
                sctilefont::setcolor(this.menustrings[this.activeidx].font, 255, 255, 0, 255);
            }
            else if (param1.button == 40) {
                gcstaticsoundsptrarray::playtablesound(1072);
                sctilefont::setcolor(this.menustrings[this.activeidx].font, 255, 255, 255, 255);
                this.activeidx = this.activeidx + 1;
                if (this.activeidx > (this.menustrings.__length - 1)) {
                    this.activeidx = 0;
                }
                sctilefont::setcolor(this.menustrings[this.activeidx].font, 255, 255, 0, 255);
            }
            else if (param1.button == 37) {
                if (this.activeidx == 0) {
                    gcstaticsoundsptrarray::playtablesound(1072);
                    this.currentlanguage = this.currentlanguage - 1;
                    if (this.currentlanguage < 0) {
                        this.currentlanguage = this.languagestrings.__length - 1;
                    }
                }
                else if (this.activeidx == 1) {
                    this.gammalevel = this.gammalevel - 5;
                    if (this.gammalevel < 190) {
                        this.gammalevel = 190;
                    }
                    else {
                        gcgraphicsoptions::setgammacorrection(this.gammalevel);
                    }
                }
                else if (this.activeidx == 2) {
                    this.currentkeyboardoptions = this.currentkeyboardoptions - 1;
                    if (this.currentkeyboardoptions < 0) {
                        this.currentkeyboardoptions = this.keyboardoptionsstrings.__length - 1;
                    }
                }
                else if (this.activeidx == 3) {
                    
                }
                this.updatestrings();
            }
            else if (param1.button == 39) {
                if (this.activeidx == 0) {
                    gcstaticsoundsptrarray::playtablesound(1072);
                    this.currentlanguage = this.currentlanguage + 1;
                    if (this.currentlanguage > (this.languagestrings.__length - 1)) {
                        this.currentlanguage = 0;
                    }
                }
                else if (this.activeidx == 1) {
                    this.gammalevel = this.gammalevel + 5;
                    if (this.gammalevel > 320) {
                        this.gammalevel = 320;
                    }
                    else {
                        gcgraphicsoptions::setgammacorrection(this.gammalevel);
                    }
                }
                else if (this.activeidx == 2) {
                    this.currentkeyboardoptions = this.currentkeyboardoptions + 1;
                    if (this.currentkeyboardoptions > (this.keyboardoptionsstrings.__length - 1)) {
                        this.currentkeyboardoptions = 0;
                    }
                }
                else if (this.activeidx == 3) {
                    
                }
                this.updatestrings();
            }
            else if (param1.button == 13) {
                gcstaticsoundsptrarray::playtablesound(1073);
                if (this.activeidx == 0) {
                    gcareadirector::setlanguage(this.currentlanguage);
                    this.updatestrings();
                }
                else if (this.activeidx == 1) {
                    
                }
                else if (this.activeidx == 2) {
                    gckeymapper::setkeyoption(gcgame::getkeymapper(), this.currentkeyboardoptions + 1);
                }
                else if (this.activeidx == 3) {
                    this.need_to_call_backward = 1;
                }
            }
        }
        return null;
    }
}