class lego_volatileplatform : lego_moveableobject {
    property obj;
    property objid;
    property objname;
    property dropsoundonce;
    property platformfallingsound;
    property platformrumblesound;
    property touched;
    
    method lego_volatileplatform(param1, param2, param3) {
        this.lego_moveableobject(param1, param2, param3);
        this.obj = new lego_physicsobject(param1, param2);
        this.objid = this.obj.id;
        this.id = this.obj.id;
        this.objname = scslosifoundation::identifiertostring(this.obj.id);
        this.name = scslosifoundation::identifiertostring(this.obj.id);
        this.platformfallingsound = null;
        this.platformrumblesound = null;
        this.dropsoundonce = 1;
        this.touched = 0;
        return null;
    }
    
    method initfull(param1, param2, param3, param4, param5, param6, param7, param8, param9) {
        this.obj.initfull(null, 1, 1, 0, 0, null, param1, param2, null, param3, param4, param5, param6, param7, param8);
        this.obj.setresponse(1, 0, 1);
        this.obj.setasshakeobj();
        var var1;
        if (param1 != null) {
            this.madeonthefly = 1;
            var1 = gcmoveableobj::create("dumy", "dummy", "dummy", 0);            
            this.handle = gcmoveableobj::create(this.name, param2, param1, param9);
        }
        this.moveable_initfull();
        return null;
    }
    
    //Fairly self explanatory, no arguments uses a default, arguments overrides with whatever soundtable ID you want to pull from
    method setupsounds(rumble_soundtable_id, falling_soundtable_id) {
        if (this.platformrumblesound != null) {
            this.platformrumblesound.cleanupfull();
            this.platformrumblesound = null;
        }
        if (this.platformfallingsound != null) {
            this.platformfallingsound.cleanupfull();
            this.platformfallingsound = null;
        }
        if (rumble_soundtable_id != null) {
            this.platformrumblesound = new tablecopysound(rumble_soundtable_id);
        }
        else {
            this.platformrumblesound = new tablecopysound(1039);
        }
        if (falling_soundtable_id != null) {
            this.platformfallingsound = new tablecopysound(falling_soundtable_id);
        }
        else {
            this.platformfallingsound = new tablecopysound(1038);
        }
        return null;
    }
    
    method show() {
        this.obj.show();
        return null;
    }
    
    method hide() {
        this.obj.hide();
        return null;
    }
    
    method cleanupfull() {
        if (this.obj != null) {
            this.obj.cleanupfull();
            this.obj = null;
        }
        if (this.platformrumblesound != null) {
            this.platformrumblesound.cleanupfull();
            this.platformrumblesound = null;
        }
        if (this.platformfallingsound != null) {
            this.platformfallingsound.cleanupfull();
            this.platformfallingsound = null;
        }
        return null;
    }
    
    method reset() {
        this.obj.shakereset();
        this.dropsoundonce = 1;
        this.touched = 0;
        return null;
    }
    
    //Using the touch method for handling sound setup 
    method touch(bool, rumble_soundtable_id, falling_soundtable_id) {
        if (this.touched == 0) {
            if ((bool == null) || (bool == 0)) {
                
            }
            else {
                this.setupsounds(rumble_soundtable_id, falling_soundtable_id);
                this.platformrumblesound.play();
            }
            this.touched = 1;
            this.obj.shaketouch();
        }
        return null;
    }
    
    method settimetofall(param1) {
        this.obj.settimetofall(param1);
        return null;
    }
    
    method setfallrotation(param1, param2, param3) {
        this.obj.setfallrotation(param1, param2, param3);
        return null;
    }
    
    method setshakerotateintensity(param1) {
        this.obj.setshakerotateintensity(param1);
        return null;
    }
    
    method setshakebobbleintensity(param1) {
        this.obj.setshakebobbleintensity(param1);
        return null;
    }
    
    method setshakekillheight(param1) {
        this.obj.setshakekillheight(param1);
        return null;
    }
    
    //We have to pass arguments sometimes back to touch via onevent, hence this weirdness
    method onevent(param1, bool, rumble, fall) {
        if (param1.eventid == 1) {
            if (param1.args[1] == this.objid) {
                if (param1.args[0] == scslosifoundation::stringtoidentifier("cnt1")) {
                    this.touch(bool, rumble, fall);
                }
            }
        }
        else if (param1.eventid == 48) {
            if (param1.args[0] == 1) {
                if (param1.args[1] == this.objid) {
                    if (this.dropsoundonce) {
                        if (this.platformfallingsound != null) {
                            this.platformfallingsound.play();
                            this.dropsoundonce = 0;
                        }
                    }
                }
            }
        }
        return null;
    }

    method fadein(fadein_rate) {
        if ((fadein_rate == 0) || (fadein_rate == null)) {
            this.setalpha(1.0);
        }
        else {
            gcmoveableobj::fadein(this.handle, fadein_rate);
        }
        return null;
    }
    
    method fadeout(fadeout_rate) {
        if ((fadeout_rate == 0) || (fadeout_rate == null)) {
            this.setalpha(0.0);
        }
        else {
            gcmoveableobj::fadeout(this.handle, fadeout_rate);
        }
        return null;
    }
}