class test_puzzle {
    property parent;
    property callsurfonce;
    property miruactive;
    property holedo;
    property musichasstarted;
    property boulderarray;
    property villager;
    
    method test_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
		var boulder = 0;
        var kevin = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("kevn"));
		var tohunga = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("vlgr"), 0);
        var ussal = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("krb2"));
        var nobua = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("vl01"), 0);
        gcmodeldirector::setnearestmax(7);
        gcareadirector::setnearestmax(7);
        gcareadirector::setfog(-16777216, 0 - 5.0, 0 - 600.0, 0.01);
        gclightdirector::setcavelighting(0);
        globalclass.bgmusic.changefilename("Root/Data/sounds/MusicTechnoSnowboard");
        this.callsurfonce = 1;
        this.miruactive = 1;
        this.holedo = 1;
        this.musichasstarted = 0;

        //Boulder Stuff
        this.boulderarray = [ new bldr_boulder("bld0", this, 0 - 55.1, 80.2, 0 - 101.1, 2.8, 1) ]; 
        while ((this.boulderarray.__length - 1) >= boulder) {
            this.boulderarray[boulder].initfull();
            boulder = boulder + 1;
        }
        
        //Kevin Stuff
        gccharacter::setscale(kevin, 15.0);
		gccharacter::setanimationscalar(kevin, 2.00);
        
        //Liam Staff Tohunga Stuff
        gccharacter::settohunga(tohunga, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0), scslosifoundation::stringtoidentifier("mkmn"));
		gccharacter::setcolors(gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("vlgr"), 0), rgba(96, 116, 161, 0), rgba(255, 255, 255, 0), rgba(255, 255, 255, 0));
		gccharacter::addpart(tohunga, "vlgr/sash", 1);
		gccharacter::addpart(tohunga, "vlgr/vahi", 2);
		gccharacter::addpart(tohunga, "vlgr/spfs", 3);		
		gccharacter::setinputstate(tohunga, scslosifoundation::stringtoidentifier("none"));
        gccharacter::setsplitanimation(tohunga, scslosifoundation::stringtoidentifier("d003"), -1);
		gccharacter::setorientation(tohunga, -90);

        //Ussal Stuff
        gccharacter::addpart(ussal, "krb2/nbua", 1);
        gccharacter::setinputstate(ussal, scslosifoundation::stringtoidentifier("none"));
        gccharacter::switchanimation(ussal, scslosifoundation::stringtoidentifier("kr00"), -1);    
        
        //Nobua Stuff
        gccharacter::settohunga(nobua, rgba(102, 0, 102, 255), rgba(102, 0, 102, 255), scslosifoundation::stringtoidentifier("mk6a"));
        gccharacter::setinputstate(nobua, scslosifoundation::stringtoidentifier("none"));
        gccharacter::switchanimation(nobua, scslosifoundation::stringtoidentifier("hak1"), -1);
        gccharacter::setorientation(nobua, 0);
        gccharacter::setshadowtype(nobua, 0);

        //Spline test
        this.villager = new gs_lego_character("vl02", "vl02", "fake", 0, 16.4179, -9.37957, -14.5622, "aiin");
        this.villager.initfull();
        this.villager.add(0);
        this.villager.show();
        this.villager.aisetspline("Root/Data/Levels/lev1/test/test_spline.slb", 0);
        this.villager.aienablepatrolonspline();
        this.villager.aipatrol();
        //this.villager.aidisablepatrolonspline();
        //this.villager.aiidle();

        return null;
    }


    method cleanupfull() {
        if (this.villager != null) {
            this.villager.cleanupfull();
            this.villager = null;
        }
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
    
    method process(param1) {
        var boulder = 0;
        while ((this.boulderarray.__length - 1) >= boulder) {
            this.boulderarray[boulder].process(param1);
            boulder = boulder + 1;
        }
        return null;
    }
    
    method onevent(param1) {
        if (param1.eventid == 46) {
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 3) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tb00")) {
                globalclass.player.kill();
                gcstaticsoundsptrarray::playtablesound(1048);
                this.parent.level.cam.setaimode(7);
                globalclass.player.actor.setinputstate("none");
            }
        }
        else if (param1.eventid == 27) {
            globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
            globalclass.player.unkill();
            globalclass.player.actor.setsplitanimation(scslosifoundation::stringtoidentifier("o000"));
            globalclass.player.actor.setsurfingability(0.0, 0.0);
            this.parent.level.cam.setaimode(11);
            globalclass.player.actor.setinputstate("ninp");
            this.callsurfonce = 1;
        }
        else if (param1.eventid == 4) {
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tp00")) {
                if (this.callsurfonce) {
                    this.startsurf();
                    this.callsurfonce = 0;
                    if (this.musichasstarted == 0) {
                        this.musichasstarted = 1;
                        globalclass.bgmusic.play(1);
                    }
                }
            }
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tp01")) {
                if (this.miruactive) {
                    this.actmiru();
				}
            }
            if (param1.args[0] == scslosifoundation::stringtoidentifier("tp02")) {
                if (this.holedo) {
                    this.holedo();
				}
            }
        }

        var boulder = 0;
        if (param1.eventid == 31) {
            while ((this.boulderarray.__length - 1) >= boulder) {
                if (param1.args[0] == this.boulderarray[boulder].id) {
                    this.boulderarray[boulder].resettostart();
                }
                boulder = boulder + 1;
            }
        }
        else if (param1.eventid == 1) {
            while ((this.boulderarray.__length - 1) >= boulder) {
                if (param1.args[0] == this.boulderarray[boulder].id) {
                    if (param1.args[1] == scslosifoundation::stringtoidentifier("cnt1")) {
                        globalclass.player.actor.react(0, 4, this.boulderarray[boulder].id);
                    }
                }
                boulder = boulder + 1;
            }
        }
        while ((this.boulderarray.__length - 1) >= boulder) {
            this.boulderarray[boulder].onevent(param1);
            boulder = boulder + 1;
        }
        return null;
    }
    
    method input(param1) {
        var boulder = 0;
        while ((this.boulderarray.__length - 1) >= boulder) {
            this.boulderarray[boulder].input(param1);
            boulder = boulder + 1;
        }
        return null;
    }
    
    method startsurf() {
        globalclass.player.actor.setsurfingability(0.3, 0.8);
        globalclass.player.actor.setsurfminspeed(100.0);
        globalclass.player.actor.setsurfmaxspeed(200.0);
        return null;
    }
    
    method stopsurf() {
        globalclass.player.actor.setsurfingability(0.0, 0.0);
        return null;
    }

	method actmiru() {
		globalclass.player.maskcontrol.changemask(4);
		globalclass.player.maskcontrol.toggleactive();
    return null;
    }

	method holedo() {
        var player = gcmodeldirector::getcharacter(scslosifoundation::stringtoidentifier("cnt1"));
        globalclass.player.actor.setsurfingability(0.3, 0.8);
        globalclass.player.actor.setsurfminspeed(10.0);
        globalclass.player.actor.setsurfmaxspeed(50.0);
        gccharacter::setscale(player, 0.00001);
    return null;
    }

}