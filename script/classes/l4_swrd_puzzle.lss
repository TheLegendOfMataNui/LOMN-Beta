class l4_swrd_puzzle {
    property parent;
    property platforms;
    property hookarray;
    property hittrigerbox;
    
    method l4_swrd_puzzle(param1) {
        this.parent = param1;
        return null;
    }
    
    method initfull() {
        var var1;
        var var2;
        gcareadirector::setnearestmax(50);
        this.platforms = [ new platform("pl02"), 
            new platform("pl03") ];
        var1 = 0;
        while ((this.platforms.__length - 1) >= var1) {
            this.platforms[var1].initfull();
            this.platforms[var1].setresponse(0, 0, 3);
            var1 = var1 + 1;
        }
        var2 = gcareadirector::gethive(scslosifoundation::stringtoidentifier("ghv0"));
        gchive::setmaxcreatures(var2, 2);
        gchive::setcreaturetype(var2, scslosifoundation::stringtoidentifier("lsrp"));
        gchive::setspawnrate(var2, 4);
        this.hittrigerbox = 0;
        globalclass.player.setgrapplinghookdistance(50);
        this.hookarray = [ new lego_moveableobject("hk01"), 
            new lego_moveableobject("hk02"), 
            new lego_moveableobject("hk03") ];
        var1 = 0;
        while ((this.hookarray.__length - 1) >= var1) {
            this.hookarray[var1].initfull();
            this.hookarray[var1].setmytargetingflags(1);
            this.hookarray[var1].setresponse(1, 1, 1);
            this.hookarray[var1].settweakable();
            var1 = var1 + 1;
        }
        return null;
    }
    
    method show() {
        this.platforms[0].setuppath([ new basicpoint(424, 12, -1170), 
            new basicpoint(424, 12, -1170), 
            new basicpoint(406, 19, -1190), 
            new basicpoint(389, 28, -1198), 
            new basicpoint(389, 28, -1198), 
            new basicpoint(406, 19, -1190) ], [ 0.5, 
            2.0, 
            2.0, 
            0.5, 
            2.0, 
            2.0 ]);
        this.platforms[1].setuppath([ new basicpoint(376, 23, -1205), 
            new basicpoint(376, 23, -1205), 
            new basicpoint(339, 45.6, -1232), 
            new basicpoint(339, 45.6, -1232) ], [ 0.5, 
            3.0, 
            0.5, 
            3.0 ]);
        return null;
    }
    
    method initshort() {
        globalclass.player.unkill();
        globalclass.player.actor.gotopos(this.parent.enterstartid, this.parent.enterlookid);
        if (this.hittrigerbox) {
            gccollisionphysicsgroup::toggletriggerboxentered(scslosifoundation::stringtoidentifier("tb00"), 0);
            this.parent.level.cam.setaimode(11);
            this.hittrigerbox = 0;
        }
        return null;
    }
    
    method hide() {
        var var1;
        var var2;
        var1 = null;
        var2 = 0;
        while ((this.platforms.__length - 1) >= var2) {
            this.platforms[var2].cleanupfull();
            this.platforms[var2] = null;
            var2 = var2 + 1;
        }
        this.platforms = null;
        var2 = 0;
        while ((this.hookarray.__length - 1) >= var2) {
            this.hookarray[var2].cleanupfull();
            this.hookarray[var2] = null;
            var2 = var2 + 1;
        }
        this.hookarray = null;
        return null;
    }
    
    method onevent(param1) {
        var var1;
        if (param1.eventid == 3) {
            this.hittrigerbox = 1;
            this.parent.level.cam.setaimode(7);
            gccollisionphysicsgroup::spinmask(1.2);
        }
        else if (param1.eventid == 27) {
            if (this.hittrigerbox) {
                globalclass.player.kill();
            }
            else {
                this.initshort();
            }
        }
        else if (param1.eventid == 46) {
            if (this.hittrigerbox) {
                this.initshort();
            }
            else {
                gccollisionphysicsgroup::spinmask(1.2);
            }
        }
        else if (param1.eventid == 7) {
            if (param1.args[2] == scslosifoundation::stringtoidentifier("Ecut")) {
                gcstaticsoundsptrarray::playtablesound(149);
            }
        }
        var1 = 0;
        while ((this.platforms.__length - 1) >= var1) {
            this.platforms[var1].onevent(param1);
            var1 = var1 + 1;
        }
        return null;
    }
    
    method input(param1) {
        return null;
    }
    
    method process(param1) {
        var var1;
        var1 = 0;
        while ((this.platforms.__length - 1) >= var1) {
            this.platforms[var1].process(param1);
            var1 = var1 + 1;
        }
        return null;
    }
    
    method cheat() {
        globalclass.player.addmask(11);
        return null;
    }
    
    method exit() {
        this.parent = null;
        return null;
    }
}