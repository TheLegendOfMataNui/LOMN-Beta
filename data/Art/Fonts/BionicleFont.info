//A comment is defined by the double forward slash at the beginning of a line.
//If you have more than 256 characters in one comment line, you'll most likely have
//a problem, but that should be plenty of space.  Especially when you consider that you can
//always continue your comment on the next line, as you can have as many comment line as you
//want.  (Within the given parameters explained below.)  Also NO empty lines in this file.
//I know that may not be wonderful, but I don't want to have to write a really robust parser
//for TiffSpliter, which is the program that will read this file.  You could use empty comments
//for formatting if you like though.
//
//DIRECTIONS FOR GETTING A FONT READY FOR THE GAME
//1. Get the font image in Tiff format.  MAKE SURE IT WAS SAVED OUT THROUGH DEBABBLIZER AND
//   NOT PHOTOSHOP!!!  Photoshop does declare the alpha channel in the tiff header and my
//   tiff library won't look for it unless that is set.  Debabblizer does declare the alpha
//   channel and so all is well.  (If you are using some other program to save the tiffs out
//   and are unsure if it sets the tag you can do the following.  Save it out and run through
//   the rest of the process.  If after the font has been ripped the alpha channel is still
//   correct then the save format was fine.  If the alpha channel is all one color (most likely
//   opaque) then the tag wasn't properly set.  The font image should have each character spaced
//   so that they will fall within a power of two grid.  (I.e. each character is within a 16 x 16,
//   32 x 32, or some other such tile.  (The tile technically doesn't have to be square, but since
//   consoles often only like texture/images that way, it better to get it the habit.)
//
//2. Know the following information about the font:
//   width of tile
//   height of tile
//   kerning
//   baseline
//   space size
//   RGBA of background color
//   The ordering of the characters in the image and the ascii or other values they map to.
//
//3. Write a file like this one.  At the end of these directions is the REAL font info file
//   that was used to rip font_11.tif the the interface directory.  (You don't have to use this
//   but I wanted to make the point THIS IS A VALID FILE!!
//
//4. Run TiffSpliter with the following commandline arguments:
//   TiffSpliter <image>.tif <fontinfofile>
//
//5. take the resulting images (there likely will be a lot of them), and convert them to 
//   targas (.tga)  This shouldn't be much of a problem as any program that saves targas with
//   alpha channels will be fine--photoshop included.
//
//6. put all the targas and the <image>.fnt file (generated by TiffSpliter) into the
//   same directory.  (Although not required, I'd recommend making a collective file and storing
//   all the file there.)
//
//7. YOu are now done setting up your font.  For directions on how to setup the font class see
//   the barbarians.vbo newgroup or come and ask me.  (Nicholas N. Pakidko)
//The following parameters MUST come in this order, or I won't be responsible for any ensuing
//crashes.  (And I'm sure they would come!)
//This is the WIDTH of each tile that contains a character.
//This MUST be on the line by itself.
16
//This is the HEIGHT of each tile that contains a character.
//This MUST be on the line by itself.
16
//This is the number (in pixels) for the KERNING.  This value can be negative.
//This MUST be on the line by itself.
-4
//This is the number (in pixels) from the bottom of the tile, to the BASELINE of the characters.
//This MUST be on the line by itself.
12
//This is the number (in pixels) that should be used for the SIZE OF A SPACE in the font.
//NOTE: all these values in pixels should be in proportion to the size of the font.  The font
//class will then handle all scaling.
//This MUST be on the line by itself.
12
//This is the RGBA color that is the background color, and should be ignored when calculating the size
//of the actual character in the font.  They MUST be on the same line and separated by a space in the
//order of Red Green Blue Alpha
0 0 0 0
//This line is all the characters in the font, in the order they appear in the font.  the
//ripper rips left to right, top to bottom, so order them in that fashion.  If you don't the
//font will still get ripped, but when you pass a string the the font class to be written it
//will come out looking REALLY weird.
//Additionally, for any character that is not within the normal ascii range (or any you can't
//simply type out on the comand line, use escape characters. To signal an escape character
//start it with the '\x' and then put whatever hex number from A0 to FE you want.  (\xFF is
//currently reserved for a callback function.  For more information on that see Tyler.)  If
//your hex number is 0xF0 through 0xFE the ripper will assume the next byte is also part of
//the character and get it as well.  (However, if the next character is within 0xF0 - 0xFF
//the ripper will still process it as is.  Hence, characters can be specified with at most
//2 bytes!)  This line MUST be one single line, NO spaces between the characters and NO
//newlines!!!  Also, there CAN NOT be any comments after this line.  Hence this line is the
//last line in the file.
0123456789!?.:;,"()&ABCDEFGHIJKLMNOPQRSTUVWXYZ-/%#<>+abcdefghijklmnopqrstuvwxyz'\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE